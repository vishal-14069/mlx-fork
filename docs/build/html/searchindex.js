Search.setIndex({"docnames": ["cpp/ops", "dev/extensions", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.Stream", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.simplify", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.AdaDelta", "python/_autosummary/mlx.optimizers.Adafactor", "python/_autosummary/mlx.optimizers.Adagrad", "python/_autosummary/mlx.optimizers.Adam", "python/_autosummary/mlx.optimizers.AdamW", "python/_autosummary/mlx.optimizers.Adamax", "python/_autosummary/mlx.optimizers.Lion", "python/_autosummary/mlx.optimizers.Optimizer", "python/_autosummary/mlx.optimizers.OptimizerState", "python/_autosummary/mlx.optimizers.RMSprop", "python/_autosummary/mlx.optimizers.SGD", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_unflatten", "python/array", "python/data_types", "python/devices_and_streams", "python/fft", "python/linalg", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.contrastive_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/random", "python/transforms", "python/tree_utils", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "filenames": ["cpp/ops.rst", "dev/extensions.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.Stream.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.simplify.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.AdaDelta.rst", "python/_autosummary/mlx.optimizers.Adafactor.rst", "python/_autosummary/mlx.optimizers.Adagrad.rst", "python/_autosummary/mlx.optimizers.Adam.rst", "python/_autosummary/mlx.optimizers.AdamW.rst", "python/_autosummary/mlx.optimizers.Adamax.rst", "python/_autosummary/mlx.optimizers.Lion.rst", "python/_autosummary/mlx.optimizers.Optimizer.rst", "python/_autosummary/mlx.optimizers.OptimizerState.rst", "python/_autosummary/mlx.optimizers.RMSprop.rst", "python/_autosummary/mlx.optimizers.SGD.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/fft.rst", "python/linalg.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.contrastive_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "titles": ["Operations", "Developer Documentation", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.Stream", "mlx.core.abs", "mlx.core.add", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.cos", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.item", "mlx.core.array.log", "mlx.core.array.log1p", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.sum", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array_equal", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.concatenate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.dequantize", "mlx.core.divide", "mlx.core.divmod", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.eye", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.identity", "mlx.core.inner", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.jvp", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.norm", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.simplify", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.stop_gradient", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.value_and_grad", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer", "mlx.optimizers.OptimizerState", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_unflatten", "Array", "Data Types", "Devices and Streams", "FFT", "Linear Algebra", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GroupNorm", "mlx.nn.InstanceNorm", "mlx.nn.LayerNorm", "mlx.nn.Linear", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.ReLU", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Step", "mlx.nn.Transformer", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.contrastive_loss", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.selu", "mlx.nn.silu", "mlx.nn.step", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "Random", "Transforms", "Tree Utils", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "terms": {"mlx": [1, 2, 3, 4, 6, 214, 291, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306], "provid": [1, 3, 72, 98, 182, 187, 207, 214, 229, 234, 236, 244, 245, 246, 249, 258, 290, 294, 305, 307], "open": [1, 6, 15, 145, 149], "flexibl": [1, 5], "which": [1, 3, 4, 5, 6, 15, 33, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 103, 104, 105, 106, 107, 110, 112, 138, 141, 142, 151, 152, 155, 156, 157, 158, 159, 172, 173, 178, 187, 189, 190, 220, 221, 223, 229, 233, 252, 273, 276, 282, 291, 297, 300, 301, 302, 306, 307], "user": [1, 3, 214], "mai": [1, 110, 220, 300, 301], "add": [1, 3, 80, 117, 135, 138, 217, 218, 300, 306], "special": 1, "without": [1, 3, 5, 174, 247, 290, 299, 302, 303, 306], "much": [1, 3, 302], "hassl": 1, "while": [1, 3, 6, 152, 252, 302, 303], "librari": [1, 6, 214], "suppli": 1, "effici": [1, 3, 5, 220, 252, 302, 304], "can": [1, 3, 5, 6, 11, 15, 47, 58, 73, 74, 75, 78, 99, 100, 108, 109, 110, 117, 124, 127, 129, 140, 141, 145, 148, 149, 156, 175, 187, 214, 222, 233, 244, 254, 273, 291, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307], "compos": [1, 5, 214, 300, 304], "ani": [1, 3, 5, 15, 164, 206, 207, 208, 214, 223, 229, 230, 233, 249, 258, 291, 299, 300, 302, 304, 305, 306], "number": [1, 15, 52, 66, 72, 81, 98, 101, 107, 111, 135, 138, 139, 141, 144, 147, 149, 151, 153, 164, 182, 184, 187, 189, 190, 214, 216, 217, 218, 220, 221, 224, 225, 247, 248, 258, 260, 261, 262, 263, 297, 300, 307], "applic": [1, 6], "aris": [1, 303], "case": [1, 3, 84, 87, 88, 90, 91, 92, 93, 94, 122, 152, 172, 220, 253, 257, 282, 287, 289, 300, 304, 305, 306, 307], "where": [1, 4, 81, 138, 187, 190, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 233, 248, 250, 253, 255, 257, 262, 263, 267, 268, 269, 274, 285, 287, 288, 289, 300, 301], "new": [1, 4, 61, 128, 152, 173, 183, 207, 247, 294, 296, 301, 302, 303], "function": [1, 2, 3, 4, 5, 13, 74, 76, 77, 98, 107, 110, 122, 162, 164, 187, 189, 190, 194, 207, 214, 223, 228, 230, 234, 244, 248, 254, 257, 258, 267, 268, 269, 284, 289, 291, 296, 297, 299, 301, 302, 303, 305], "highli": [1, 6], "optim": [1, 2, 4, 5, 245, 300, 302], "ar": [1, 2, 3, 4, 5, 6, 13, 15, 60, 61, 63, 67, 81, 83, 84, 86, 87, 89, 90, 92, 93, 98, 103, 104, 105, 106, 107, 110, 112, 122, 134, 135, 136, 138, 139, 140, 141, 142, 145, 148, 149, 158, 159, 172, 173, 178, 187, 189, 190, 201, 206, 207, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 236, 247, 249, 270, 271, 273, 274, 290, 294, 299, 300, 301, 302, 303, 304, 305, 306], "need": [1, 3, 4, 5, 60, 138, 214, 245, 246, 256, 258, 297, 300, 302, 303, 304, 306], "For": [1, 3, 6, 110, 138, 208, 214, 216, 220, 229, 234, 241, 244, 249, 252, 256, 260, 261, 262, 263, 291, 297, 301, 302, 303, 304, 305, 306], "you": [1, 3, 4, 5, 6, 214, 256, 258, 291, 297, 300, 301, 303, 305, 306], "design": [1, 2, 5, 297, 306], "your": [1, 3, 6, 294, 300, 302], "own": [1, 6, 303], "link": [1, 6], "top": [1, 227], "core": [1, 2, 3, 4, 214, 216, 225, 236, 239, 242, 259, 260, 261, 262, 263, 264, 265, 266, 270, 273, 291, 294, 296, 303, 304], "we": [1, 2, 3, 4, 72, 138, 139, 199, 201, 214, 222, 254, 297, 299, 300, 302, 306], "inner": 1, "work": [1, 3, 6, 300, 301, 302], "go": [1, 3, 300], "over": [1, 3, 4, 12, 14, 22, 23, 24, 25, 65, 66, 84, 87, 90, 93, 102, 110, 111, 121, 123, 125, 126, 136, 137, 154, 167, 168, 176, 182, 188, 216, 217, 218, 224, 226, 250, 273, 300], "simpl": [1, 3, 4, 214, 222, 290, 300, 302], "learn": [1, 2, 4, 5, 195, 196, 197, 198, 199, 200, 201, 204, 205, 216, 224, 225, 226, 248, 250], "step": [1, 3, 4, 15, 196, 214], "involv": [1, 296], "ad": [1, 2, 6, 195, 196, 197, 198, 199, 200, 204, 225, 294, 302, 305], "let": [1, 2, 3, 300, 302, 303], "": [1, 2, 3, 4, 35, 44, 72, 83, 84, 86, 87, 89, 90, 92, 93, 98, 110, 112, 125, 134, 138, 141, 153, 156, 157, 187, 188, 190, 194, 202, 214, 233, 234, 236, 240, 244, 296, 297, 300, 302, 303, 304, 305, 306], "sai": [1, 3, 291, 302], "would": [1, 3, 301, 302, 303, 306], "like": [1, 3, 5, 133, 193, 221, 279, 300, 302, 303, 304, 306], "an": [1, 3, 4, 6, 8, 12, 14, 26, 61, 65, 66, 78, 81, 94, 97, 101, 110, 112, 123, 126, 128, 132, 133, 135, 137, 138, 139, 151, 152, 153, 169, 172, 177, 178, 179, 182, 184, 190, 192, 193, 195, 202, 203, 206, 207, 214, 219, 224, 226, 227, 229, 247, 248, 249, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 285, 291, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307], "take": [1, 3, 4, 98, 107, 124, 127, 133, 139, 179, 187, 189, 190, 193, 247, 297, 300, 301, 305, 306, 307], "two": [1, 11, 13, 60, 73, 75, 83, 86, 92, 99, 100, 108, 109, 117, 122, 124, 127, 129, 134, 177, 249, 272, 300, 301, 306], "arrai": [1, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 214, 216, 229, 236, 239, 242, 248, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 291, 294, 300, 302, 303, 304, 306], "x": [1, 2, 3, 4, 76, 101, 110, 139, 142, 153, 158, 162, 164, 185, 186, 191, 201, 207, 214, 216, 223, 224, 225, 226, 227, 228, 229, 248, 250, 251, 253, 255, 256, 257, 267, 268, 269, 282, 284, 285, 286, 287, 288, 289, 294, 296, 300, 301, 302, 303, 304, 306], "y": [1, 2, 3, 4, 164, 191, 197, 214, 216, 220, 224, 225, 226, 227, 250, 271, 275, 282, 296, 300, 302, 303], "scale": [1, 3, 72, 138, 139, 196, 220, 221, 247, 252, 253, 256, 287], "them": [1, 3, 214, 234, 244, 306], "both": [1, 11, 73, 74, 75, 99, 100, 108, 109, 110, 117, 124, 127, 129, 141, 175, 225, 296, 300, 304, 306], "some": [1, 2, 3, 4, 234, 244, 300, 302], "coeffici": [1, 195, 196, 198, 199, 200, 201], "alpha": [1, 138, 199, 204, 253, 283, 285, 287], "beta": [1, 72, 138, 198, 199, 200, 201, 216, 224, 225, 226, 282], "respect": [1, 2, 4, 98, 138, 187, 207, 214, 216, 223, 224, 225, 226, 294, 300, 304], "togeth": [1, 4, 138, 207], "get": [1, 2, 4, 6, 66, 143, 203, 214, 300, 302, 306], "z": [1, 164, 302], "well": [1, 3, 214, 234, 244, 247, 302], "veri": [1, 3, 247, 302, 306], "easili": 1, "do": [1, 3, 6, 199, 214, 235, 244, 291, 294, 300, 302], "just": [1, 4, 301], "write": [1, 3, 214, 303], "out": [1, 6, 220, 221, 241, 300, 301], "follow": [1, 3, 4, 5, 6, 15, 67, 72, 110, 138, 195, 196, 197, 198, 199, 200, 201, 205, 214, 268, 269, 277, 297, 300, 306], "import": [1, 2, 3, 4, 6, 110, 158, 164, 187, 206, 207, 208, 214, 216, 225, 236, 270, 273, 291, 294, 300, 301, 302, 303, 304], "mx": [1, 2, 3, 4, 110, 112, 158, 164, 187, 214, 216, 225, 229, 236, 240, 251, 259, 260, 261, 262, 263, 264, 265, 266, 270, 272, 273, 277, 286, 291, 294, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307], "def": [1, 2, 3, 4, 164, 187, 214, 294, 300, 301, 302, 303, 306], "simple_axpbi": 1, "float": [1, 13, 15, 57, 96, 97, 110, 139, 140, 145, 148, 149, 195, 196, 197, 198, 199, 200, 201, 204, 205, 210, 216, 219, 220, 221, 224, 225, 226, 229, 250, 252, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 271, 272, 273, 274, 276, 282, 283, 289], "return": [1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 37, 50, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 206, 207, 208, 214, 231, 233, 235, 237, 238, 239, 242, 249, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 291, 294, 299, 300, 301, 302, 303, 305, 306], "thi": [1, 3, 4, 6, 12, 13, 14, 15, 22, 23, 24, 25, 107, 110, 117, 121, 122, 123, 125, 126, 136, 137, 141, 164, 167, 168, 169, 176, 178, 188, 214, 219, 220, 221, 230, 231, 233, 234, 237, 238, 239, 242, 244, 245, 246, 247, 249, 257, 260, 261, 262, 263, 268, 269, 279, 289, 294, 299, 300, 302, 303, 305], "perform": [1, 3, 5, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 122, 139, 153, 167, 178, 214, 224, 258, 262, 263, 301, 302, 306], "leav": [1, 207], "differenti": [1, 5], "howev": [1, 214, 223, 224, 297, 302, 303], "vector": [1, 2, 5, 102, 107, 110, 178, 189, 190, 222, 273, 304], "math": [1, 3, 283], "often": [1, 221], "realiz": 1, "axpbi": 1, "routin": 1, "defin": [1, 2, 3, 4, 6, 110, 139, 203, 206, 303], "same": [1, 3, 6, 60, 61, 66, 67, 88, 91, 92, 93, 98, 107, 135, 141, 153, 189, 191, 214, 216, 219, 224, 225, 249, 259, 260, 261, 262, 263, 264, 265, 266, 271, 273, 283, 294, 297, 301, 306], "realli": 1, "part": [1, 300, 301], "doe": [1, 3, 6, 214, 301, 302, 303], "fast": [1, 164, 223, 269, 306], "so": [1, 3, 6, 98, 164, 187, 219, 296, 302, 306], "decid": [1, 207, 233], "want": [1, 3, 300, 306], "reli": 1, "acceler": [1, 216], "framework": [1, 5], "continu": [1, 300], "impos": 1, "our": [1, 3, 4, 195, 196, 197, 198, 200, 201, 254], "assumpt": 1, "also": [1, 3, 4, 5, 6, 11, 73, 74, 75, 84, 87, 90, 93, 99, 100, 108, 109, 117, 124, 127, 129, 138, 175, 194, 203, 214, 233, 245, 247, 249, 253, 255, 267, 287, 288, 290, 296, 300, 301, 302, 303, 304, 307], "assum": [1, 3, 207, 214, 224], "how": [1, 3, 4, 214, 217, 218, 222, 301, 306], "gradient": [1, 2, 4, 98, 174, 187, 194, 195, 196, 198, 199, 200, 201, 205, 214, 234, 245, 249, 279, 294, 296, 300, 301, 302, 303, 304], "ins": 1, "what": [1, 3, 207], "coincid": 1, "right": [1, 6, 138, 223, 268, 269, 274, 276, 283], "place": [1, 3, 153, 302, 303], "cours": [1, 300], "The": [1, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 35, 44, 50, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 156, 157, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 230, 236, 240, 245, 246, 247, 249, 250, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 289, 291, 294, 296, 300, 301, 302, 303, 304, 305, 306, 307], "structur": [1, 300], "from": [1, 3, 4, 5, 72, 89, 90, 92, 93, 97, 110, 112, 122, 133, 138, 140, 141, 142, 143, 145, 148, 158, 172, 174, 175, 178, 179, 191, 193, 206, 207, 208, 214, 227, 234, 236, 247, 260, 261, 262, 263, 265, 266, 271, 274, 282, 291, 299, 300, 302, 303, 304, 305, 306], "frontend": 1, "api": [1, 300], "redirect": 1, "when": [1, 3, 5, 6, 110, 112, 217, 218, 262, 263, 277, 282, 294, 297, 306], "appropri": 1, "fallback": 1, "metal": 1, "vjp": [1, 304], "jvp": [1, 304], "In": [1, 3, 4, 122, 138, 195, 197, 198, 200, 201, 207, 214, 220, 224, 294, 299, 300, 302, 305, 306], "one": [1, 3, 6, 57, 63, 66, 80, 81, 110, 115, 122, 139, 141, 172, 175, 244, 273, 306], "sentenc": 1, "comput": [1, 2, 3, 4, 5, 6, 72, 98, 107, 110, 117, 125, 134, 138, 164, 167, 174, 182, 187, 188, 189, 194, 195, 196, 198, 199, 200, 201, 214, 216, 224, 225, 226, 234, 245, 249, 250, 252, 260, 261, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 296, 300, 304, 306], "graph": [1, 3, 4, 5, 164, 300], "rule": 1, "evalu": [1, 3, 4, 5, 78, 107, 189, 214, 232, 241, 294, 296, 304], "said": [1, 3], "start": [1, 2, 3, 5, 6, 15, 111, 169, 301, 306], "discuss": 1, "more": [1, 4, 8, 57, 122, 156, 157, 214, 216, 220, 252, 256, 260, 261, 262, 263, 297, 300, 301, 304, 306], "detail": [1, 8, 195, 197, 198, 200, 201, 214, 220, 252, 256, 260, 261, 262, 263, 301, 304], "thei": [1, 2, 3, 67, 201, 254, 275, 294, 299, 302, 304, 305, 306], "c": [1, 3, 110, 210, 216, 217, 218, 220, 221, 225, 303, 304, 306], "scalar": [1, 11, 13, 26, 37, 57, 60, 61, 63, 73, 74, 75, 96, 97, 98, 99, 100, 108, 109, 110, 111, 117, 118, 119, 120, 122, 124, 127, 129, 135, 145, 148, 149, 156, 175, 187, 191, 194, 271, 283, 300, 302, 304], "i": [1, 3, 4, 5, 6, 15, 24, 33, 57, 63, 65, 66, 67, 74, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 107, 110, 112, 117, 121, 122, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 152, 155, 156, 157, 162, 164, 167, 169, 174, 178, 179, 182, 183, 187, 188, 189, 190, 191, 196, 199, 201, 203, 206, 207, 210, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 227, 233, 234, 240, 241, 243, 244, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 262, 263, 267, 268, 269, 270, 271, 272, 274, 279, 282, 283, 285, 288, 289, 294, 297, 300, 301, 302, 303, 304, 305, 306, 307], "sum": [1, 2, 11, 102, 110, 121, 167, 182, 214, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 301, 303], "element": [1, 10, 11, 16, 17, 18, 19, 20, 21, 24, 52, 62, 68, 69, 72, 73, 74, 75, 76, 77, 79, 81, 95, 96, 99, 100, 103, 104, 105, 106, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 124, 127, 129, 130, 136, 138, 139, 150, 151, 154, 162, 163, 165, 166, 170, 171, 175, 178, 180, 181, 187, 191, 219, 220, 221, 228, 248, 252, 255, 284, 285, 288, 300], "wise": [1, 10, 11, 16, 17, 18, 19, 20, 21, 62, 68, 69, 73, 74, 75, 76, 77, 79, 95, 96, 99, 100, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 124, 127, 129, 130, 150, 154, 162, 163, 165, 166, 170, 171, 175, 180, 181, 220, 221, 228, 248, 255, 284, 285, 288], "numpi": [1, 3, 4, 5, 11, 13, 15, 61, 73, 74, 75, 99, 100, 108, 109, 117, 122, 124, 127, 129, 175, 302, 304, 305], "style": [1, 11, 13, 73, 74, 75, 99, 100, 108, 109, 117, 122, 124, 127, 129, 175], "broadcast": [1, 11, 13, 61, 63, 73, 74, 75, 97, 99, 100, 108, 109, 117, 122, 124, 127, 129, 140, 141, 148, 149, 175, 179, 191, 247], "between": [1, 5, 63, 258, 272, 275, 276, 279, 302, 306], "input": [1, 2, 3, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 147, 150, 151, 152, 153, 154, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 247, 249, 250, 252, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 274, 275, 276, 277, 279, 281, 283, 289, 291, 300, 301, 304, 305], "upcast": 1, "const": [1, 274], "factor": [1, 273], "streamordevic": 1, "stream": [1, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 306], "schedul": [1, 306], "itself": 1, "call": [1, 3, 4, 27, 96, 214, 222, 234, 244, 254, 294, 296, 300, 302], "other": [1, 3, 5, 110, 201, 214, 235, 294, 301, 302, 304], "within": [1, 24], "simplest": [1, 214], "wai": [1, 3, 6, 214, 300, 301], "about": [1, 3, 4, 302, 306], "term": [1, 195, 196, 197, 198, 199, 200, 204, 274], "exist": [1, 3, 234, 244], "auto": [1, 6], "ax": [1, 12, 14, 22, 23, 58, 80, 83, 84, 86, 87, 89, 90, 92, 93, 102, 110, 121, 123, 125, 126, 135, 137, 167, 172, 176, 177, 182, 183, 188, 300], "multipli": [1, 138, 139, 219, 256], "earlier": 1, "goal": 1, "themselv": 1, "contain": [1, 3, 24, 25, 50, 88, 89, 90, 110, 118, 119, 120, 138, 169, 191, 214, 233, 235, 236, 258, 291, 294, 300], "act": [1, 279], "data": [1, 4, 5, 8, 15, 81, 91, 92, 97, 101, 111, 132, 148, 184, 192, 221, 259, 260, 261, 262, 263, 264, 265, 266, 301, 303], "nor": [1, 98, 187], "rather": [1, 300, 306], "easi": [1, 214], "interfac": 1, "block": [1, 3, 258], "A": [1, 3, 5, 6, 50, 60, 98, 107, 110, 112, 121, 122, 138, 140, 141, 142, 144, 145, 148, 149, 169, 173, 187, 189, 190, 194, 198, 200, 206, 207, 208, 214, 216, 220, 224, 225, 226, 228, 233, 237, 238, 245, 246, 250, 254, 256, 258, 260, 261, 263, 269, 283, 284, 294, 296, 300, 302, 303], "It": [1, 3, 6, 98, 187, 202, 214, 246, 249, 303, 305], "creat": [1, 3, 6, 81, 101, 214, 294, 296, 301, 303], "output": [1, 3, 6, 12, 13, 14, 15, 24, 61, 81, 88, 91, 92, 93, 97, 98, 101, 110, 111, 121, 123, 125, 126, 132, 133, 136, 137, 140, 141, 142, 144, 145, 148, 149, 158, 159, 167, 172, 176, 179, 184, 187, 188, 189, 190, 191, 192, 193, 216, 217, 218, 225, 227, 247, 249, 257, 258, 260, 261, 262, 263, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 289, 291, 300, 301, 302, 303, 304, 305, 306], "given": [1, 12, 14, 24, 61, 63, 64, 72, 78, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 97, 110, 121, 123, 125, 126, 137, 145, 153, 167, 169, 176, 184, 185, 186, 188, 219, 233, 247, 271, 272, 274], "set": [1, 3, 4, 6, 196, 203, 223, 227, 232, 234, 241, 244, 245, 249, 252, 257, 271, 272, 283, 289, 294, 297, 300, 302], "further": [1, 6, 300], "class": [1, 3, 4, 7, 8, 9, 26, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294], "under": [1, 110], "These": [1, 179, 273, 306], "word": 1, "bit": [1, 72, 138, 139, 210, 229, 249], "abstract": 1, "back": [1, 3, 303], "give": [1, 3, 4, 24], "ourselv": 1, "concret": [1, 227, 302, 306], "imag": [1, 218, 220, 221], "public": [1, 214], "explicit": [1, 297, 303], "alpha_": 1, "beta_": 1, "must": [1, 6, 63, 78, 97, 110, 140, 141, 145, 148, 149, 191, 303], "know": [1, 3], "popul": 1, "To": [1, 2, 3, 4, 6, 214, 291, 300, 304], "avoid": 1, "unnecessari": [1, 3], "alloc": [1, 294], "respons": 1, "space": [1, 111, 281], "void": 1, "eval_cpu": 1, "std": [1, 265], "overrid": 1, "eval_gpu": 1, "jacobian": [1, 107, 189, 304], "product": [1, 102, 107, 122, 134, 137, 182, 189, 247, 304], "primal": [1, 107, 189], "tangent": [1, 20, 21, 107, 180, 181], "int": [1, 3, 4, 7, 9, 12, 14, 15, 22, 23, 24, 25, 29, 30, 31, 32, 40, 41, 42, 43, 45, 48, 50, 53, 56, 57, 59, 61, 64, 65, 66, 72, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 101, 110, 111, 121, 123, 125, 126, 128, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 167, 168, 169, 172, 173, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 190, 192, 214, 216, 217, 218, 222, 224, 225, 226, 227, 247, 249, 250, 252, 256, 258, 271, 272, 273, 277, 281, 283, 294], "argnum": [1, 98, 187, 300], "cotan": 1, "across": [1, 224], "pair": [1, 135, 236, 252], "repres": [1, 3, 283, 303], "axi": [1, 3, 4, 12, 14, 22, 23, 24, 25, 29, 30, 31, 32, 40, 41, 42, 43, 45, 53, 56, 59, 64, 80, 82, 85, 88, 89, 90, 91, 92, 93, 110, 121, 123, 125, 126, 128, 135, 136, 137, 141, 151, 167, 168, 169, 172, 173, 176, 177, 178, 179, 183, 188, 190, 271, 272, 273, 277, 281, 283, 301], "correspond": [1, 12, 14, 57, 63, 72, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 121, 123, 126, 137, 176, 182, 190, 207, 300], "dimens": [1, 3, 12, 14, 22, 23, 44, 50, 57, 66, 80, 89, 90, 92, 93, 94, 102, 110, 121, 122, 123, 125, 126, 137, 138, 141, 147, 176, 179, 182, 183, 188, 216, 217, 218, 220, 221, 224, 225, 226, 247, 250, 252, 258, 273, 300], "vmap": [1, 300, 302, 304], "print": [1, 2, 3, 4, 6, 206, 207, 208, 214, 297, 300, 301, 302, 303, 304], "ostream": 1, "o": [1, 6], "equival": [1, 27, 47, 58, 74, 96, 178, 223, 246, 248, 249], "check": [1, 6, 60, 236, 300, 301], "bool": [1, 12, 14, 22, 23, 29, 30, 31, 32, 40, 41, 42, 43, 45, 56, 57, 59, 60, 110, 112, 121, 123, 125, 126, 137, 139, 140, 145, 148, 149, 176, 188, 196, 205, 216, 217, 218, 224, 225, 226, 227, 229, 233, 234, 236, 241, 244, 247, 249, 252, 256, 258, 270, 274], "is_equival": 1, "privat": 1, "fall": 1, "eval": [1, 2, 3, 4, 164, 214, 294, 296, 300, 302, 304], "deriv": [1, 300, 302], "base": [1, 110, 114, 116, 200, 202, 252, 258, 294, 296, 297, 301], "abov": [1, 3, 6, 138, 185, 199, 214, 300, 301, 302, 306], "demonstr": [1, 303], "treat": [1, 60, 89, 90, 92, 93, 178], "paramet": [1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 236, 241, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 289, 290, 291, 294, 296, 300, 302], "produc": [1, 247, 291], "through": [1, 174, 201, 258, 300, 303], "construct": [1, 4, 97, 132, 192], "its": [1, 6, 122, 136, 147, 164, 184, 194, 198, 199, 200, 208, 214, 249, 303, 306], "type": [1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 50, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 202, 206, 214, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 301], "shape": [1, 3, 4, 47, 60, 61, 65, 66, 82, 85, 88, 91, 92, 93, 97, 107, 122, 132, 133, 140, 141, 142, 144, 145, 148, 149, 152, 179, 189, 191, 192, 193, 214, 216, 217, 218, 220, 221, 225, 227, 236, 259, 260, 261, 262, 263, 264, 265, 266, 271, 273, 283, 296, 300, 301, 304, 306], "pass": [1, 3, 4, 47, 58, 134, 135, 187, 194, 206, 207, 214, 234, 244, 245, 246, 249, 254, 302], "re": [1, 4, 6, 291], "now": [1, 3, 6, 249, 303], "promot": 1, "dtype": [1, 3, 15, 26, 33, 57, 81, 97, 101, 110, 111, 132, 142, 144, 145, 148, 149, 184, 192, 210, 259, 260, 261, 262, 263, 264, 265, 266, 270, 273, 300, 301, 303, 304, 305], "promoted_dtyp": 1, "promote_typ": 1, "float32": [1, 15, 81, 101, 110, 111, 132, 142, 144, 148, 149, 184, 192, 210, 259, 260, 261, 262, 263, 264, 265, 266, 270, 273, 300, 301, 302, 303, 304, 305], "non": [1, 6, 228, 242, 284, 294], "point": [1, 2, 3, 6, 96, 139, 210], "out_dtyp": 1, "is_floating_point": 1, "cast": [1, 33, 91, 92, 93, 112, 229, 303], "up": [1, 3, 249], "determin": [1, 240, 305], "x_cast": 1, "astyp": [1, 3, 229, 303], "y_cast": 1, "broadcasted_input": 1, "broadcast_arrai": 1, "out_shap": 1, "0": [1, 2, 3, 4, 6, 7, 15, 48, 53, 59, 64, 65, 66, 81, 94, 98, 110, 135, 140, 149, 151, 153, 169, 173, 184, 185, 186, 187, 188, 190, 195, 196, 198, 199, 200, 201, 204, 205, 206, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 248, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 276, 282, 283, 285, 286, 287, 289, 291, 294, 297, 300, 301, 302, 303, 304, 305], "unique_ptr": 1, "make_uniqu": 1, "to_stream": 1, "handl": [1, 214], "resolv": 1, "No": [1, 3], "happen": [1, 3, 258, 296, 302], "alon": [1, 303], "effect": [1, 220, 302], "onli": [1, 3, 5, 6, 60, 65, 66, 110, 138, 210, 214, 233, 234, 236, 241, 244, 245, 246, 294, 300, 305, 306], "execut": [1, 6, 303, 306], "depend": [1, 2, 57, 110, 301, 305, 306], "devic": [1, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 306, 307], "specifi": [1, 15, 33, 66, 89, 90, 97, 98, 110, 111, 128, 132, 141, 151, 177, 178, 179, 182, 183, 187, 190, 192, 216, 257, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 289, 300, 306], "memori": [1, 5, 164, 196, 294, 302, 303], "ha": [1, 3, 4, 5, 57, 88, 89, 91, 92, 93, 98, 141, 216, 227, 294, 296, 301, 302, 304, 306], "been": [1, 3, 302], "try": [1, 6], "naiv": [1, 300], "gener": [1, 2, 15, 81, 89, 90, 111, 140, 144, 145, 148, 149, 258, 297, 301, 302, 307], "version": [1, 6, 72, 117, 121, 138, 167, 190, 297, 300, 301], "declar": 1, "member": [1, 214, 239, 242], "method": [1, 3, 7, 8, 9, 26, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 214, 240, 294], "each": [1, 50, 72, 78, 122, 135, 138, 139, 141, 151, 158, 159, 169, 183, 190, 191, 220, 221, 222, 224, 252, 258, 273, 297, 302], "find": [1, 2, 6], "pointwis": 1, "captur": [1, 214], "templat": 1, "axpby_impl": 1, "typenam": 1, "t": [1, 3, 76, 139, 187, 195, 196, 197, 198, 199, 200, 201, 204, 205, 214, 300, 306], "readi": 1, "fill": [1, 97, 133, 184, 193, 259, 260, 261, 262, 263, 265, 266], "malloc_or_wait": 1, "synchron": 1, "avail": [1, 2, 3, 4, 6, 8, 210, 306], "There": [1, 214], "wait": [1, 3], "here": [1, 3, 300, 302, 305, 306], "request": 1, "pressur": 1, "condit": [1, 191, 306], "set_data": 1, "nbyte": 1, "collect": [1, 203, 207, 299], "pointer": 1, "x_ptr": 1, "y_ptr": 1, "out_ptr": 1, "relev": 1, "static_cast": 1, "size_t": 1, "out_idx": 1, "size": [1, 3, 4, 50, 66, 72, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 101, 110, 138, 139, 141, 152, 169, 172, 196, 214, 217, 218, 222, 225, 249, 302, 303], "map": [1, 4, 112, 207, 222, 229], "linear": [1, 3, 4, 5, 207, 214, 223, 236, 249, 251, 253, 255, 267, 268, 269, 286, 287, 288, 291, 294], "indic": [1, 13, 22, 23, 24, 25, 98, 103, 104, 105, 106, 169, 178, 179, 187, 241, 243, 271, 273, 301], "offset": [1, 3], "x_offset": 1, "elem_to_loc": 1, "stride": [1, 65, 66, 217, 218, 252, 301], "y_offset": 1, "contigu": 1, "regularli": 1, "default": [1, 6, 12, 14, 15, 22, 23, 24, 25, 60, 64, 65, 66, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 101, 110, 111, 112, 121, 123, 125, 126, 132, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 152, 153, 168, 169, 172, 173, 176, 182, 183, 184, 185, 186, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 210, 216, 217, 218, 225, 227, 229, 234, 236, 241, 244, 247, 248, 249, 252, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 294, 297, 299, 300, 303, 305, 307], "row": [1, 81, 101, 138, 184], "major": 1, "henc": [1, 138], "doesn": [1, 214], "addit": [1, 3, 11, 112, 216, 224, 226, 247, 250, 294, 300], "abl": [1, 138], "all": [1, 4, 6, 13, 24, 66, 78, 81, 84, 87, 90, 93, 122, 135, 136, 172, 202, 214, 229, 230, 234, 237, 238, 239, 242, 244, 247, 249, 256, 258, 291, 294, 297, 301, 302, 304, 307], "incom": 1, "accordingli": 1, "dispatch": 1, "float16": [1, 112, 210, 229, 302, 303], "bfloat16": [1, 303], "complex64": 1, "throw": 1, "error": [1, 6, 76, 77, 169, 223, 249, 267, 268, 269, 279, 280, 300, 303], "encount": [1, 300], "unexpect": [1, 15], "regist": [1, 4], "op": [1, 134, 234, 302], "assert": 1, "2": [1, 2, 3, 4, 66, 76, 83, 86, 88, 89, 90, 91, 92, 93, 110, 116, 122, 138, 147, 182, 184, 185, 186, 195, 197, 198, 199, 204, 210, 214, 218, 223, 250, 256, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 273, 274, 276, 282, 283, 291, 294, 300, 301, 302, 303, 304, 305, 306], "1": [1, 3, 4, 15, 24, 25, 65, 66, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 102, 110, 122, 134, 136, 138, 141, 149, 162, 168, 178, 187, 195, 196, 197, 198, 199, 200, 201, 204, 205, 210, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 248, 250, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 287, 289, 291, 294, 296, 300, 301, 303, 304, 305, 306], "correct": [1, 6, 198, 199, 200, 301, 302], "els": [1, 3, 214, 234, 302], "float16_t": 1, "bfloat16_t": 1, "complex64_t": 1, "runtime_error": 1, "support": [1, 3, 5, 6, 13, 65, 66, 112, 122, 138, 300, 301, 303, 305], "have": [1, 3, 6, 60, 89, 90, 92, 93, 122, 141, 201, 206, 247, 254, 299, 301, 302, 306], "rememb": 1, "3": [1, 3, 6, 110, 196, 201, 261, 263, 297, 301, 303, 304], "complic": 1, "keep": [1, 12, 14, 22, 23, 121, 123, 125, 126, 137, 176, 188, 214, 233, 300, 302], "mind": [1, 3], "half": [1, 15, 145, 149, 252, 302], "precis": [1, 3, 214, 223], "direct": [1, 3, 201, 231, 306], "fix": [1, 3, 6, 302], "possibli": [1, 3, 122], "due": 1, "transpos": [1, 3, 27, 139], "aren": 1, "guarante": 1, "fit": [1, 138, 306], "requir": [1, 3, 214, 302, 303], "column": [1, 81, 101, 138], "inplac": 1, "expect": [1, 3, 217, 218, 219, 220, 221, 256, 258, 274, 301], "answer": 1, "copi": [1, 3, 5, 136, 168, 303], "simpli": [1, 3, 6, 251, 286, 294, 300], "catlas_saxpbi": 1, "axpby_impl_acceler": 1, "first": [1, 2, 3, 4, 6, 94, 98, 118, 120, 122, 136, 147, 177, 182, 187, 196, 198, 199, 200, 206, 214, 224, 271, 272, 300, 303, 306], "mode": [1, 67, 232, 241, 243, 262, 263], "e": [1, 4, 6, 76, 107, 162, 197, 216, 217, 218, 220, 221, 224, 225, 226, 234, 250, 290, 296, 302, 307], "match": [1, 6, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 236, 273, 301, 303], "transposit": 1, "data_s": 1, "items": 1, "flag": [1, 303], "copy_inplac": 1, "copytyp": 1, "n": [1, 3, 26, 65, 66, 81, 82, 84, 85, 87, 88, 91, 93, 101, 184, 188, 216, 217, 218, 220, 221, 279, 283], "incx": 1, "inci": 1, "great": 1, "But": [1, 306], "criteria": 1, "luckili": [1, 302], "alwai": [1, 206, 300], "With": 1, "final": [1, 2, 3, 4], "singl": [1, 4, 78, 107, 112, 135, 189, 301, 305], "row_contigu": 1, "col_contigu": 1, "common": [1, 302], "hit": 1, "mileston": 1, "enough": [1, 302], "run": [1, 3, 4, 5, 6, 134, 164, 195, 196, 198, 199, 200, 216, 229, 302, 306, 307], "If": [1, 3, 6, 12, 14, 15, 22, 23, 24, 25, 57, 60, 63, 64, 67, 78, 91, 92, 93, 96, 97, 98, 110, 112, 121, 122, 123, 125, 126, 132, 135, 136, 137, 141, 151, 167, 168, 169, 176, 178, 179, 182, 187, 188, 190, 192, 196, 207, 216, 217, 218, 224, 226, 227, 234, 236, 244, 249, 252, 254, 256, 270, 271, 273, 283, 300, 302, 305, 306, 307], "plan": 1, "stop": [1, 3, 15, 111, 174, 300, 301], "enjoi": 1, "speed": 1, "appl": [1, 3, 5, 6, 306], "silicon": [1, 3, 5, 6, 306], "address": 1, "shade": 1, "languag": [1, 210], "kernel": [1, 65, 66, 301], "written": 1, "help": [1, 3, 306], "resourc": 1, "walkthrough": 1, "pipelin": 1, "specif": [1, 6, 300], "cpp": 1, "algorithm": [1, 201], "launch": [1, 301], "exactli": [1, 3, 236, 300], "mani": [1, 169, 217, 218, 222, 302], "thread": 1, "pick": 1, "updat": [1, 2, 3, 4, 196, 199, 201, 205, 207, 216, 229, 236, 246, 296, 302], "assign": [1, 294], "axpby_gener": 1, "buffer": [1, 303], "constant": [1, 3, 6, 135, 204, 214, 216, 224, 226, 250, 271, 274, 283, 303], "4": [1, 3, 72, 110, 138, 139, 158, 210, 216, 225, 249, 258, 260, 261, 262, 270, 301, 304, 306], "5": [1, 2, 3, 6, 110, 140, 204, 216, 219, 220, 221, 225, 259, 262, 263, 282, 291, 300, 301], "x_stride": 1, "6": [1, 3, 110, 158, 204, 258, 261, 268, 269, 274, 283, 301, 304], "y_stride": 1, "7": [1, 3, 110, 138, 301], "ndim": [1, 110], "8": [1, 3, 6, 110, 138, 195, 196, 197, 198, 199, 200, 204, 210, 225, 258, 272, 301, 304, 306], "uint": 1, "index": [1, 5, 7, 9, 24, 80, 81, 98, 136, 178, 179, 187], "thread_position_in_grid": 1, "convert": [1, 57, 249, 302, 303, 304], "instanti": [1, 4, 302], "uniqu": [1, 297], "host": 1, "name": [1, 112, 138, 139, 156, 157, 158, 159, 203, 214, 224, 233, 236, 238, 301, 305], "identifi": [1, 206, 299], "instantiate_axpbi": 1, "type_nam": 1, "host_nam": 1, "axpby_general_": 1, "compil": [1, 6, 302], "mlx_ext": 1, "metallib": [1, 6], "see": [1, 3, 4, 6, 8, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 58, 59, 110, 156, 157, 214, 216, 220, 223, 232, 248, 249, 252, 253, 256, 260, 261, 262, 263, 267, 268, 269, 287, 300, 301, 304, 306], "later": [1, 6], "co": [1, 256, 300], "locat": [1, 245, 246, 306], "share": [1, 5, 72, 138, 139], "register_librari": 1, "potenti": 1, "path": [1, 6, 158, 159, 236], "tri": 1, "load": [1, 4, 5, 236], "hasn": 1, "alreadi": [1, 3], "static": [1, 6], "object": [1, 8, 26, 37, 57, 140, 145, 148, 149, 190, 206, 207, 220, 299], "why": [1, 3], "packag": [1, 2, 4, 291], "process": [1, 3, 67, 207, 221, 222, 258, 299], "logic": [1, 118, 119, 120], "grid": 1, "shown": 1, "below": [1, 6, 110, 184, 186, 210, 302], "prepar": [1, 3], "carri": 1, "should": [1, 2, 3, 4, 6, 107, 138, 164, 179, 187, 189, 206, 214, 217, 218, 220, 221, 241, 247, 254, 273, 275, 294, 299, 300, 302, 303, 307], "d": [1, 3, 102, 110, 122, 134, 178, 184, 185, 186, 195, 198, 200, 208, 221, 306], "ostringstream": 1, "kname": 1, "axpby_": 1, "general_": 1, "type_to_nam": 1, "make": [1, 3, 4, 6, 122, 214, 302, 304, 306], "sure": [1, 3, 6, 214], "look": [1, 3], "folder": 1, "get_colocated_mtllib_path": 1, "get_kernel": 1, "str": [1, 67, 98, 110, 112, 155, 156, 157, 158, 159, 187, 206, 208, 229, 230, 233, 234, 236, 238, 240, 244, 262, 263, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "encod": [1, 252, 256, 258, 273], "compute_encod": 1, "get_command_encod": 1, "setcomputepipelinest": 1, "those": [1, 3, 214], "nelem": 1, "set_array_buff": 1, "setbyt": 1, "sizeof": 1, "threadgroup": 1, "higher": [1, 102, 300], "than": [1, 3, 57, 67, 74, 99, 100, 108, 109, 122, 196, 201, 207, 252, 257, 282, 289, 300, 306], "max": [1, 110, 124, 196, 200, 248, 271, 272, 274, 275, 283, 285, 300, 306], "allow": [1, 202, 214, 246, 294, 301, 304], "tgp_size": 1, "min": [1, 110, 127, 248, 285], "maxtotalthreadsperthreadgroup": 1, "3d": [1, 216, 221], "mtl": 1, "group_dim": 1, "grid_dim": 1, "divid": [1, 96, 138], "among": 1, "dispatchthread": 1, "few": [1, 3, 4, 5, 164, 302, 304], "thing": [1, 3], "note": [1, 3, 6, 13, 65, 66, 89, 90, 110, 138, 141, 214, 303, 305], "befor": [1, 3, 6, 24, 136, 233, 258, 301, 302], "move": [1, 128, 306], "track": [1, 214, 216], "activ": [1, 6, 220, 228, 257, 258, 284, 289, 290], "u": [1, 202, 227, 246, 302], "command": [1, 6], "instead": [1, 6, 214, 246, 256, 300, 302], "end_encod": 1, "end": [1, 138, 253, 257, 276, 282, 287, 289], "until": [1, 302, 304], "limit": [1, 63, 301], "flush": 1, "enqueu": 1, "commit": 1, "associ": [1, 158, 159, 302], "suggest": 1, "deeper": 1, "dive": 1, "studi": 1, "come": [1, 3, 300], "far": [1, 296], "built": [1, 6, 302], "includ": [1, 230, 249, 274, 300, 301, 304, 305, 307], "forward": [1, 187, 302], "diff": 1, "push": 1, "along": [1, 22, 23, 64, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 110, 151, 167, 169, 173, 178, 179, 182, 214], "similarli": [1, 6, 122, 300, 302], "scale_arr": 1, "contribut": 1, "tangent_x": 1, "tangent_i": 1, "revers": [1, 183, 256], "arg": [1, 3, 8, 47, 58, 78, 158, 159, 164], "push_back": 1, "fulli": [1, 5, 303, 306], "overal": 1, "directori": [1, 3, 6], "extens": [1, 112, 210, 240, 305], "h": [1, 65, 66, 110, 216, 218, 220, 221, 300, 302], "mlx_sample_extens": 1, "__init__": [1, 3, 4, 7, 8, 9, 26, 214, 294], "py": [1, 3, 6], "cmakelist": 1, "txt": 1, "setup": [1, 2, 4, 6], "hold": [1, 3, 8, 110, 202], "instal": 1, "pybind11": [1, 6], "sinc": [1, 3, 4, 201, 294, 303, 306], "compon": [1, 3], "etc": [1, 138, 214], "becom": 1, "pybind11_modul": 1, "m": [1, 3, 6, 81, 110, 184, 195], "doc": [1, 4], "sampl": [1, 2, 3, 111, 140, 141, 142, 145, 148, 149, 260, 261, 262, 263, 265, 266, 274, 283, 297], "_a": 1, "pos_onli": 1, "kw_onli": 1, "none": [1, 3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 206, 207, 223, 229, 233, 234, 244, 247, 256, 258, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 301], "r": [1, 3, 187, 220], "pbdoc": 1, "most": [1, 141, 214, 300, 301, 302], "complex": [1, 89, 90, 91, 92, 93, 140, 145, 148, 149, 206, 214, 246, 300], "bell": 1, "whistl": 1, "liter": [1, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "string": [1, 303, 305], "modul": [1, 3, 4, 194, 249, 254, 258, 291, 299, 302], "ensur": [1, 6, 279], "caster": 1, "find_packag": 1, "config": 1, "add_librari": 1, "sourc": [1, 128, 183], "target_sourc": 1, "cmake_current_list_dir": 1, "header": 1, "target_include_directori": 1, "target_link_librari": 1, "attach": 1, "conveni": [1, 4], "mlx_build_metallib": 1, "target": [1, 187, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "destin": [1, 128], "automat": [1, 5, 112, 304, 305, 306], "practic": 1, "mlx_build_met": [1, 6], "mlx_ext_metallib": 1, "titl": 1, "include_dir": 1, "project_source_dir": 1, "mlx_include_dir": 1, "output_directori": 1, "cmake_library_output_directori": 1, "add_depend": 1, "endif": 1, "pybind11_add_modul": 1, "build_shared_lib": 1, "target_link_opt": 1, "wl": 1, "rpath": 1, "loader_path": 1, "onc": [1, 164], "describ": [1, 302], "util": [1, 3, 5, 6, 158, 214], "__name__": [1, 3], "__main__": [1, 3], "descript": [1, 3, 210], "ext_modul": 1, "cmakeextens": 1, "cmdclass": 1, "build_ext": 1, "cmakebuild": 1, "package_dir": 1, "package_data": 1, "dylib": 1, "zip_saf": 1, "fals": [1, 3, 12, 14, 22, 23, 29, 30, 31, 32, 40, 41, 42, 43, 45, 56, 59, 60, 110, 112, 121, 123, 125, 126, 137, 176, 188, 191, 196, 205, 206, 207, 210, 224, 225, 227, 234, 236, 244, 247, 249, 252, 256, 258, 270, 274, 303], "python_requir": 1, "even": [1, 3, 302, 303], "though": [1, 3, 302, 303], "j8": 1, "libmlx_ext": 1, "cpython": 1, "3x": 1, "darwin": 1, "pip": [1, 6], "after": [1, 3, 4, 24, 96, 136, 138, 216, 224, 226, 247, 258, 282, 306], "plai": [1, 3], "ones": [1, 3, 133, 158, 164, 184, 245, 246, 249, 301], "b": [1, 3, 11, 13, 60, 73, 74, 75, 96, 99, 100, 102, 108, 109, 110, 117, 118, 120, 122, 124, 127, 129, 134, 138, 175, 182, 187, 227, 300, 301, 302, 303, 304, 305, 306], "f": [1, 2, 4, 110, 199, 214, 303], "item": [1, 2, 3, 4, 207, 302, 303, 304], "true": [1, 2, 3, 60, 110, 112, 139, 167, 191, 196, 206, 207, 210, 214, 216, 217, 218, 224, 225, 226, 227, 233, 234, 236, 241, 244, 249, 252, 256, 258, 270, 279], "quick": [1, 5], "benchmark": 1, "compar": [1, 60], "time": [1, 3, 6, 164, 214, 300, 302, 306], "set_default_devic": 1, "256": [1, 4], "512": [1, 3, 258, 306], "random": [1, 2, 3, 4, 5, 216, 225, 236, 241, 300, 306, 307], "normal": [1, 2, 3, 148, 203, 214, 216, 224, 225, 226, 250, 258, 260, 262, 303, 306], "bench": 1, "warm": 1, "rang": [1, 2, 3, 4, 6, 15, 111, 261, 263, 268, 269, 296, 297, 300, 302, 306], "100": [1, 2, 3, 300, 302, 306], "5000": 1, "simple_tim": 1, "custom_tim": 1, "3f": [1, 4], "custom": [1, 258], "114": 1, "109": 1, "modest": 1, "improv": [1, 3, 195, 196, 197, 198, 199, 200, 204], "awai": [1, 3], "good": [1, 6, 306], "nn": [1, 3, 4, 158, 207, 214, 291, 294, 296, 302], "grad": [1, 2, 4, 187, 296, 300, 301, 302, 304], "simplifi": [1, 302], "full": [1, 4, 47, 58, 67, 167, 245, 246, 274, 302], "implement": [2, 4, 110, 195, 196, 197, 198, 200, 201, 202, 203, 222, 233, 247, 252, 254, 256, 257, 258, 289, 300, 303], "basic": [2, 153, 300], "model": [2, 4, 5, 158, 194, 207, 214, 229, 232, 234, 236, 240, 241, 243, 244, 245, 247, 258, 291, 294, 296, 302], "problem": [2, 4, 214], "metadata": [2, 112, 156], "num_featur": [2, 216], "num_exampl": 2, "1_000": 2, "num_it": 2, "10_000": 2, "iter": [2, 4, 207, 297, 302], "sgd": [2, 4, 201, 296], "lr": [2, 201], "01": [2, 199], "rate": [2, 195, 196, 197, 198, 199, 200, 201, 204, 205], "ll": [2, 4, 276, 300], "synthet": 2, "dataset": [2, 302], "matrix": [2, 72, 81, 101, 110, 122, 138, 139, 249, 264, 291], "ground": [2, 3, 273, 282], "truth": [2, 273, 282], "w_star": 2, "valu": [2, 3, 10, 15, 22, 23, 37, 57, 60, 63, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 110, 111, 135, 140, 141, 142, 144, 145, 148, 149, 156, 178, 179, 187, 190, 194, 196, 199, 203, 206, 207, 210, 219, 220, 221, 225, 227, 233, 247, 248, 252, 257, 258, 259, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 289, 294, 300], "gaussian": [2, 223, 267, 268, 269, 274], "nois": 2, "exampl": [2, 3, 4, 15, 110, 178, 214, 216, 225, 234, 236, 241, 244, 259, 260, 261, 262, 263, 264, 265, 266, 270, 273, 291, 296, 297, 300, 301, 302, 303, 304, 305], "noisi": 2, "label": [2, 271, 273], "ep": [2, 195, 196, 197, 198, 199, 200, 204, 216, 224, 225, 226, 250, 271, 272, 274, 283], "1e": [2, 4, 13, 195, 196, 197, 198, 199, 200, 204, 216, 224, 225, 226, 250, 271, 272, 274, 283], "us": [2, 3, 4, 5, 6, 15, 72, 74, 94, 110, 122, 138, 139, 151, 152, 195, 196, 198, 199, 200, 201, 206, 214, 220, 222, 223, 227, 229, 233, 240, 245, 247, 249, 252, 256, 258, 262, 263, 268, 269, 272, 291, 294, 296, 297, 299, 300, 301, 304, 306], "weight": [2, 65, 66, 196, 199, 201, 205, 207, 214, 236, 240, 249, 273, 294, 300, 302], "squar": [2, 3, 101, 154, 170, 187, 195, 196, 198, 199, 200, 207, 214, 250, 280, 282, 300, 303], "loss": [2, 4, 187, 214, 296, 300, 302], "loss_fn": [2, 4, 296, 300], "w": [2, 66, 72, 138, 139, 187, 205, 216, 218, 220, 221, 227, 300], "mean": [2, 3, 4, 187, 214, 216, 224, 234, 250, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 300, 303], "grad_fn": [2, 300], "initi": [2, 3, 214, 216, 224, 225, 226, 227, 248, 250, 259, 260, 261, 262, 263, 264, 265, 266, 294, 302], "randomli": [2, 3, 219, 220, 221], "Then": [2, 6], "repeatedli": 2, "_": [2, 3, 214, 297, 302, 306], "verifi": [2, 6], "close": [2, 5, 6, 13], "error_norm": 2, "5f": 2, "someth": [2, 3, 301], "00005": 2, "00364": 2, "complet": [2, 3, 6, 245, 246, 300, 306], "logist": [2, 162, 255, 268, 269, 288], "github": [2, 4, 6], "repo": [2, 4, 6], "enabl": [3, 6, 205], "larg": [3, 214, 247, 279, 302], "ish": 3, "transform": [3, 5, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 194, 214, 216, 224, 226, 227, 233, 234, 244, 249, 252, 301], "compromis": 3, "eas": 3, "llama": 3, "famili": 3, "less": [3, 24, 109, 136, 252, 282], "200": 3, "line": [3, 302, 303], "python": [3, 37, 50, 57, 78, 206, 207, 208, 294, 299, 300, 303], "neural": [3, 5, 204, 222, 228, 260, 261, 284, 291, 294], "network": [3, 5, 204, 216, 220, 222, 260, 261, 291, 294], "build": [3, 5, 262, 294], "concis": 3, "architectur": [3, 6, 214, 246, 306], "notabl": [3, 5], "rope": [3, 214], "posit": [3, 24, 98, 106, 128, 136, 187, 207, 214, 217, 218, 247, 252, 256, 271, 274, 283], "option": [3, 12, 14, 15, 22, 23, 24, 25, 64, 65, 66, 67, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 101, 105, 106, 110, 111, 112, 121, 123, 125, 126, 132, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 152, 167, 168, 169, 172, 173, 176, 178, 182, 183, 184, 185, 186, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 216, 217, 218, 227, 229, 233, 234, 236, 244, 247, 249, 252, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 297, 305, 307], "kei": [3, 140, 141, 142, 144, 145, 147, 148, 149, 203, 206, 207, 233, 234, 244, 247, 252, 297, 299, 300], "cach": [3, 252], "concaten": 3, "project": [3, 247], "llamaattent": 3, "self": [3, 4, 7, 9, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 214, 228, 284, 294], "dim": [3, 222, 224, 225, 226, 247, 250, 252, 256, 258], "num_head": [3, 247, 258], "super": [3, 4, 214, 294], "tradit": [3, 220, 221, 252], "query_proj": 3, "bia": [3, 72, 138, 139, 198, 199, 200, 207, 214, 217, 218, 227, 234, 236, 244, 247, 249, 300], "key_proj": 3, "value_proj": 3, "out_proj": [3, 294], "__call__": [3, 4, 214, 294], "queri": [3, 247], "mask": [3, 241, 247, 301], "extract": [3, 214, 233, 294], "l": [3, 4, 214, 216, 217, 271, 282], "reshap": [3, 110, 301], "combin": 3, "key_cach": 3, "value_cach": 3, "sqrt": [3, 76, 195, 197, 198, 199, 204, 216, 224, 225, 226, 227, 250, 256, 260, 261, 262, 263], "score": 3, "softmax": [3, 273], "values_hat": 3, "rm": [3, 6, 196], "swiglu": 3, "rmsnorm": [3, 214], "llamaencoderlay": 3, "mlp_dim": [3, 258], "norm1": 3, "norm2": 3, "linear1": 3, "linear2": 3, "linear3": 3, "sigmoid": [3, 255, 268, 269, 288], "instanc": [3, 138, 208, 214, 225, 229, 230, 231, 234, 237, 238, 244, 246, 254, 294, 303], "embed": [3, 214, 252, 256, 272], "emb": [3, 222, 256], "token": [3, 222], "num_lay": [3, 4, 296], "vocab_s": 3, "norm": [3, 200, 201, 224, 283], "multiheadattent": [3, 214], "create_additive_causal_mask": 3, "list": [3, 8, 12, 14, 26, 29, 30, 40, 41, 42, 43, 45, 50, 53, 56, 57, 59, 61, 64, 78, 80, 83, 84, 86, 87, 89, 90, 92, 93, 97, 98, 107, 110, 121, 123, 125, 126, 132, 135, 137, 140, 141, 142, 144, 145, 148, 149, 152, 156, 167, 169, 172, 173, 176, 182, 183, 187, 188, 189, 192, 198, 199, 200, 201, 206, 208, 214, 234, 236, 237, 238, 239, 242, 244, 245, 246, 294, 299, 300, 302], "still": [3, 6, 110, 302], "consid": [3, 13, 60, 206, 207, 224, 299], "train": [3, 4, 214, 216, 219, 220, 221, 232, 234, 244, 260, 261], "ignor": [3, 63, 196], "whatsoev": 3, "rest": [3, 207, 252], "subsect": 3, "prompt": 3, "autoregress": 3, "yield": [3, 4, 297], "temp": 3, "causal": 3, "save": [3, 5, 112, 138, 156, 157, 158, 159, 240, 302], "append": [3, 122, 302], "store": 3, "per": [3, 4, 72, 138, 139, 202, 216, 224, 225, 226, 250, 302], "care": [3, 302], "last": [3, 25, 57, 84, 87, 89, 90, 92, 93, 94, 102, 122, 141, 168, 182, 217, 218, 220, 221, 224, 303], "logit": [3, 141, 270, 273], "next": [3, 4], "categor": 3, "lazili": [3, 214], "noth": [3, 214, 302], "yet": [3, 110, 214, 294, 300, 301, 302, 304], "forc": [3, 4, 214, 304], "choos": [3, 252], "pars": 3, "feed": 3, "loop": [3, 4, 300, 302], "unsqueez": 3, "sequenc": [3, 216, 217, 258, 297, 306], "length": [3, 172, 216, 217], "len": [3, 84, 87, 90, 93], "overwrit": 3, "discard": [3, 206], "old": 3, "moment": [3, 196, 198, 199, 200], "anymor": 3, "everyth": 3, "small": [3, 164, 216, 224, 226, 250, 271, 274, 279, 283, 306], "10": [3, 4, 114, 153, 158, 164, 207, 214, 236, 291, 301], "12": 3, "8192": 3, "1024": 3, "actual": [3, 15, 236, 294, 302], "materi": [3, 5], "could": [3, 214], "20_000": 3, "machin": [3, 5, 6, 204], "8gb": 3, "ram": 3, "32": [3, 4, 138, 139, 210], "44": 3, "doubl": 3, "bracket": 3, "becaus": [3, 214, 302], "batch": [3, 122, 216, 217, 218, 220, 221, 247, 302], "zip": [3, 4], "haven": 3, "anyth": [3, 187, 302], "result": [3, 15, 57, 72, 102, 110, 112, 122, 134, 139, 151, 153, 173, 182, 191, 207, 256, 300, 303], "similar": [3, 207, 245, 246, 247, 272, 303, 305], "runtim": 3, "section": [3, 6, 169, 283, 300], "access": [3, 37, 214, 294, 302, 306], "origin": [3, 195, 196, 197, 198, 200, 201, 216, 260, 261, 262, 263, 303], "sentencepiec": 3, "pytorch": [3, 5, 224, 300], "compat": [3, 141, 305], "npz": [3, 112, 158, 159, 236, 240, 305], "file": [3, 6, 112, 155, 156, 157, 158, 159, 236, 240, 300, 305], "directli": 3, "argpars": 3, "itertool": [3, 207], "starmap": [3, 207], "np": [3, 4, 303, 304], "torch": [3, 303], "map_torch_to_mlx": 3, "tok_embed": 3, "elif": 3, "replac": [3, 245, 246, 258, 282], "attention_norm": 3, "ffn_norm": 3, "wq": 3, "wk": 3, "wv": 3, "wo": 3, "w1": 3, "w2": 3, "w3": 3, "ffn": 3, "separ": [3, 47, 58, 224], "submodul": [3, 4, 214, 234, 235, 244, 246], "feed_forward": 3, "parser": 3, "argumentpars": 3, "add_argu": 3, "torch_weight": 3, "output_fil": 3, "parse_arg": 3, "state": [3, 4, 202, 203, 214, 296, 297], "savez": [3, 240, 305], "k": [3, 81, 184, 185, 186, 227, 234], "v": [3, 67, 214, 234, 303], "left": [3, 110, 138, 223, 252, 268, 269, 274, 276, 283], "disk": 3, "text": [3, 196, 201, 228, 253, 257, 260, 261, 262, 263, 271, 274, 275, 276, 279, 282, 284, 285, 287, 289], "format": [3, 112, 155, 156, 157, 158, 159, 303], "oper": [3, 5, 33, 164, 167, 174, 179, 201, 214, 258, 300, 301, 302, 303, 304, 306, 307], "dictionari": [3, 112, 156, 157, 202, 203, 206, 214, 233, 245, 246, 299, 305], "represent": [3, 138, 206, 208], "tree_unflatten": 3, "helper": 3, "weight_fil": 3, "incur": 3, "sever": [3, 65, 66, 158, 159, 305], "futur": [3, 249, 301, 302], "pth": 3, "current": [3, 5, 6, 65, 66, 138, 196, 214, 302], "around": 3, "m1": [3, 300, 306], "ultra": 3, "7b": 3, "me": 3, "ishmael": 3, "year": 3, "ago": 3, "never": [3, 302], "long": 3, "info": [3, 6], "247": 3, "press": [3, 110], "enter": 3, "littl": 3, "monei": 3, "my": [3, 6], "purs": 3, "greater": [3, 24, 100, 136, 257, 289], "consequ": 3, "walk": 3, "down": 3, "gower": 3, "street": 3, "afternoon": 3, "heavi": 3, "rain": 3, "saw": [3, 300], "off": [3, 6, 302], "man": 3, "rag": 3, "who": 3, "sat": 3, "upon": [3, 207], "hi": 3, "bundl": 3, "hard": 3, "wet": 3, "he": [3, 262, 263], "were": [3, 306], "cry": 3, "watch": 3, "him": 3, "observ": 3, "numer": [3, 110, 117, 121, 167, 195, 196, 197, 198, 199, 200, 204, 216, 224, 225, 226, 250, 271, 272, 274, 283, 302], "crowd": 3, "wa": [3, 203, 302], "hurri": 3, "437": 3, "330": 3, "second": [3, 118, 120, 122, 177, 187, 196, 198, 199, 200, 271, 272, 300, 306], "spent": 3, "amount": 3, "39": 3, "By": [3, 300, 303], "bigger": [3, 196], "remain": [3, 187, 219, 220, 221], "almost": 3, "nobodi": 3, "took": 3, "least": [3, 63, 138], "notic": [3, 300, 305], "distanc": [3, 271, 283], "had": 3, "doubt": 3, "minut": 3, "straight": 3, "slowli": 3, "rais": [3, 110, 169, 236], "ey": 3, "speak": [3, 110], "resum": 3, "postur": 3, "stood": 3, "feel": 3, "pain": 3, "heart": 3, "smile": 3, "face": 3, "am": 3, "someon": 3, "three": 3, "quarter": 3, "hour": 3, "made": 3, "immedi": [3, 229], "repli": 3, "again": [3, 6, 214], "hand": [3, 300, 302], "did": 3, "accustom": 3, "thu": [3, 214], "question": [3, 302], "reason": [3, 301], "tell": [3, 303], "understand": [3, 260, 261], "579": 3, "690": 3, "num": [3, 111, 147], "500": [3, 306], "628": 3, "went": 3, "nervou": 3, "trembl": 3, "told": 3, "And": 3, "perhap": 3, "surpris": 3, "matter": [3, 214], "shall": 3, "anyhow": 3, "friend": 3, "ye": 3, "slight": [3, 302], "kind": 3, "longer": [3, 67, 300], "soon": 3, "unless": [3, 110, 294], "unlik": [3, 13, 220, 221], "strang": 3, "amus": 3, "That": 3, "secret": 3, "disappoint": 3, "mine": 3, "cannot": [3, 63, 301, 303], "happi": 3, "ask": 3, "shop": 3, "bui": 3, "food": 3, "633": 3, "21": 3, "475": 3, "su": 3, "j": [3, 6, 110, 197, 198, 200, 220], "lu": 3, "pan": 3, "murtadha": 3, "wen": 3, "liu": 3, "2021": 3, "roform": [3, 252], "enhanc": [3, 252, 302], "rotari": [3, 252], "arxiv": [3, 195, 201, 224, 225, 226, 228, 250, 284], "preprint": [3, 195, 201], "2104": 3, "09864": 3, "zhang": 3, "sennrich": 3, "2019": [3, 199], "root": [3, 154, 170, 250], "advanc": 3, "inform": [3, 4, 6, 156, 157, 214, 216, 223, 247, 300, 306], "system": [3, 6], "shazeer": 3, "2020": 3, "glu": 3, "variant": [3, 200, 282], "2002": 3, "05202": 3, "classifi": 4, "mnist": 4, "As": [4, 178, 214], "mlp": [4, 214, 258, 296], "inherit": [4, 299], "standard": [4, 37, 57, 122, 142, 258, 260, 262, 265, 304], "idiom": 4, "input_dim": [4, 214, 227, 249], "hidden_dim": [4, 294, 296], "output_dim": [4, 214, 227, 249], "layer_s": 4, "idim": 4, "odim": 4, "maximum": [4, 22, 63, 214, 251, 256, 268, 269, 286, 294, 302], "cross": [4, 270, 273], "entropi": [4, 270, 273], "sub": [4, 147], "commonli": [4, 245, 291], "cross_entropi": [4, 214], "accuraci": 4, "valid": [4, 67, 190, 206, 234, 244, 299], "eval_fn": 4, "argmax": 4, "loader": 4, "num_class": [4, 296], "batch_siz": [4, 296], "num_epoch": [4, 296], "learning_r": [4, 195, 196, 197, 198, 199, 200, 201, 204, 205, 296], "train_imag": [4, 296], "train_label": [4, 296], "test_imag": 4, "test_label": 4, "shuffl": 4, "minibatch": 4, "batch_iter": [4, 296], "perm": 4, "permut": 4, "id": [4, 6], "put": 4, "trainabl": [4, 194, 214, 294], "loss_and_grad_fn": [4, 296, 300], "value_and_grad": [4, 214, 245, 294, 296, 300, 303, 304], "epoch": 4, "test": [4, 6], "confus": 4, "decent": 4, "95": 4, "brought": 5, "research": 5, "except": [5, 81, 88, 89, 91, 92, 93, 224, 236, 301, 303], "featur": [5, 65, 66, 216, 224, 225, 226, 227, 249, 250, 252, 258, 302], "main": [5, 81, 207, 214], "differ": [5, 175, 282, 300], "lazi": [5, 294, 304], "multi": [5, 217, 218, 301, 303], "cpu": [5, 306], "gpu": [5, 301, 306], "inspir": 5, "jax": [5, 297], "arrayfir": 5, "unifi": 5, "live": [5, 306], "guid": 5, "convers": 5, "regress": [5, 279], "layer": [5, 214, 220, 221, 224, 226, 227, 241, 246, 249, 254, 258, 290, 294], "perceptron": 5, "llm": 5, "infer": [5, 97, 112], "fft": 5, "algebra": 5, "tree": [5, 78, 98, 164, 187, 190, 202, 206, 207, 208, 300], "develop": [5, 6], "document": [5, 47, 58, 156, 157, 300, 301], "pypi": 6, "meet": 6, "seri": 6, "chip": 6, "nativ": 6, "maco": 6, "13": 6, "recommend": [6, 201], "14": 6, "sonoma": 6, "conda": 6, "forg": 6, "distribut": [6, 140, 141, 142, 144, 148, 149, 227, 260, 261, 262, 263, 265, 266, 271, 274, 277, 281, 283, 291], "probabl": [6, 145, 219, 220, 221, 249, 270, 273, 277, 306], "platform": 6, "processor": 6, "arm": [6, 210], "i386": 6, "switch": 6, "17": 6, "g": [6, 110, 138, 204, 205, 290, 302, 307], "clang": 6, "cmake": 6, "24": 6, "xcode": 6, "15": [6, 110], "environ": 6, "via": [6, 302, 303], "rosetta": 6, "unam": 6, "p": [6, 140, 198, 200, 214, 219, 220, 221, 283], "clone": 6, "git": 6, "com": 6, "ml": 6, "explor": 6, "cd": 6, "brew": 6, "global": [6, 146, 297], "env": 6, "cmake_build_parallel_level": 6, "edit": [6, 246], "unittest": 6, "discov": 6, "stub": 6, "dev": 6, "generate_stub": 6, "mkdir": 6, "either": [6, 11, 47, 57, 58, 63, 73, 74, 75, 96, 99, 100, 108, 109, 110, 117, 122, 124, 127, 129, 175, 187, 254, 262, 263], "libmlx": 6, "preprocessor": 6, "metal_path": 6, "mlx_build_test": 6, "ON": 6, "mlx_build_exampl": 6, "mlx_build_benchmark": 6, "mlx_build_python_bind": 6, "multipl": [6, 122, 129, 138, 139, 247, 256, 302, 305], "wish": 6, "variabl": [6, 98, 107, 187, 189, 190], "export": 6, "developer_dir": 6, "app": 6, "content": [6, 233], "sdk": 6, "xcrun": 6, "macosx": 6, "show": [6, 210], "unabl": 6, "tool": 6, "select": [6, 191, 229, 233], "sudo": 6, "ouptut": 6, "finder": 6, "iterm": 6, "termin": 6, "click": 6, "uncheck": 6, "window": 6, "restart": 6, "grep": 6, "cmake_host_system_processor": 6, "arm64": 6, "x86_64": 6, "wipe": 6, "cahc": 6, "rf": 6, "devicetyp": 7, "attribut": [7, 8, 9, 26, 294], "kwarg": [8, 158, 159, 307], "absolut": [10, 13, 268, 269, 282], "semant": [11, 61, 73, 74, 75, 99, 100, 108, 109, 117, 122, 124, 127, 129, 175, 306], "keepdim": [12, 14, 22, 23, 29, 30, 31, 32, 40, 41, 42, 43, 45, 56, 59, 110, 121, 123, 125, 126, 137, 167, 176, 188], "reduct": [12, 14, 121, 123, 126, 137, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "reduc": [12, 14, 22, 23, 121, 123, 125, 126, 137, 164, 176, 188, 216, 279], "unspecifi": [12, 14, 15, 22, 23, 24, 25, 64, 97, 121, 123, 125, 126, 132, 136, 137, 151, 167, 168, 176, 178, 188, 192, 307], "entir": [12, 14, 22, 23, 121, 123, 125, 126, 137, 176, 188, 220, 221], "singleton": [12, 14, 22, 23, 121, 122, 123, 125, 126, 137, 176, 188], "rtol": 13, "05": [13, 216, 224, 225, 226, 250], "atol": 13, "08": [13, 197, 198, 199, 200, 204, 271, 272], "approxim": [13, 164, 223, 267, 268, 269], "comparison": [13, 75, 99, 100, 108, 109], "equal": [13, 24, 60, 81, 100, 109, 136, 145, 169, 225, 227], "ab": [13, 110, 187, 224, 225, 226, 228, 250, 284], "array_equ": 13, "rel": [13, 196], "toler": 13, "boolean": [13, 60, 103, 104, 105, 106, 118, 119, 120, 210, 243, 301], "interv": [15, 111, 145, 149], "increment": 15, "otherwis": [15, 206, 207, 234, 236, 244, 257, 258, 270, 276, 282, 289, 302, 303], "int32": [15, 110, 145, 210, 301, 304], "convent": [15, 67, 199], "lead": 15, "fraction": 15, "integr": [15, 178, 302], "invers": [16, 17, 18, 19, 20, 21, 77, 85, 86, 87, 88, 89, 90], "cosin": [16, 17, 68, 69, 252, 272, 300], "hyperbol": [17, 19, 21, 69, 166, 181], "sine": [18, 19, 165, 166, 252, 300], "uint32": [22, 23, 24, 25, 141, 210], "minimum": [23, 63, 256, 272], "kth": [24, 136], "partit": 24, "order": [24, 110, 136, 138, 214, 224, 245, 254, 300], "undefin": [24, 136, 301], "sort": [24, 25, 136], "flatten": [24, 25, 110, 134, 136, 151, 168, 178, 179, 206], "dimension": [26, 82, 83, 84, 85, 86, 87, 91, 92, 93, 216, 217, 218, 222, 227, 249, 256, 301, 303], "val": [26, 97], "tupl": [26, 47, 58, 64, 66, 74, 78, 80, 107, 110, 135, 138, 152, 172, 187, 189, 196, 198, 199, 200, 201, 206, 207, 208, 218, 236, 238, 252, 254, 299, 300], "ndarrai": [26, 301, 302, 304], "properti": [27, 35, 44, 50, 52, 243, 300], "argument": [27, 47, 58, 78, 98, 187, 207, 214, 297, 300, 305, 306, 307], "decim": [48, 153], "indices_or_sect": [53, 169], "nest": [57, 214, 294, 299, 300], "ddof": [59, 188], "equal_nan": 60, "nan": [60, 104], "a_min": 63, "a_max": 63, "edg": [63, 135], "At": 63, "anoth": [63, 122, 175, 191, 214, 229, 300, 301, 306], "pad": [65, 66, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 217, 218], "dilat": [65, 66], "group": [65, 66, 72, 138, 139, 224, 249], "1d": [65, 67, 156, 179], "convolut": [65, 66, 67, 217, 218, 220, 221], "channel": [65, 66, 216, 217, 218, 220, 221], "c_in": [65, 66], "c_out": [65, 66], "convolv": [65, 66], "2d": [66, 138, 216, 220], "spatial": [66, 224], "symmetr": 66, "discret": [67, 82, 83, 84, 85, 86, 87, 91, 92, 93, 222], "swap": [67, 177, 246, 249], "conv": 67, "filter": [67, 217, 218, 229, 233], "flip": 67, "signal": 67, "bias": [72, 138, 139, 234, 244, 247], "group_siz": [72, 138, 139, 249], "64": [72, 138, 139, 210, 249], "configur": 72, "formal": [72, 138], "notat": [72, 206, 238], "quantiz": [72, 112, 139, 249], "w_i": [72, 138], "hat": [72, 138], "occupi": [72, 138, 139], "divis": [73, 96, 138], "quotient": [73, 74, 96], "remaind": 74, "fuction": 74, "faster": [74, 267, 300], "mathrm": [76, 162, 225], "frac": [76, 138, 162, 195, 197, 198, 199, 200, 204, 216, 219, 220, 221, 224, 225, 226, 227, 250, 260, 261, 262, 263, 272, 274, 276, 279], "pi": [76, 256, 300], "int_0": 76, "dx": 76, "erf": 77, "node": [78, 164, 190], "dict": [78, 112, 156, 157, 158, 239, 242, 245, 246, 294, 299, 300, 305], "leaf": [78, 206, 207, 233], "exponenti": [79, 253, 287], "insert": [80, 306], "ident": [81, 174, 214, 241], "diagon": [81, 184, 185, 186], "zero": [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 184, 185, 186, 193, 196, 214, 219, 220, 221, 236, 259, 260, 261, 262, 263, 264, 265, 266, 291, 301], "th": 81, "whose": [81, 194], "One": [82, 85, 91, 154, 300], "fourier": [82, 83, 84, 85, 86, 87, 91, 92, 93], "truncat": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 148], "dft": [82, 83, 84, 85, 86, 87, 91, 92, 93], "rfft": 88, "real": [88, 89, 90, 91, 92, 93], "rfft2": 89, "rfftn": 90, "silent": [91, 92, 93], "start_axi": 94, "end_axi": 94, "integ": [96, 110, 135, 138, 139, 140, 145, 169, 182, 190, 210, 222, 301], "floor": 96, "fun": [98, 107, 187, 189, 190, 301, 302, 306], "argnam": [98, 187], "neither": [98, 187], "keyword": [98, 158, 159, 187, 207, 214, 297, 305, 307], "strict": [99, 108, 234, 236, 244], "ordinari": 102, "inifn": 103, "infin": [103, 105, 106, 200], "neg": [105, 247, 274, 281, 283, 301], "union": [105, 106, 156], "ord": 110, "tabl": [110, 210, 222], "frobeniu": 110, "matric": 110, "strictli": 110, "mathemat": 110, "variou": 110, "purpos": 110, "calcul": [110, 196, 274], "fro": 110, "inf": [110, 247], "largest": 110, "sing": 110, "smallest": 110, "singular": 110, "nuclear": 110, "_f": 110, "sum_": [110, 279], "a_": 110, "valueerror": [110, 236, 300], "refer": [110, 225, 228, 260, 261, 262, 263, 284, 301], "golub": 110, "van": 110, "loan": 110, "baltimor": 110, "md": 110, "john": 110, "hopkin": 110, "univers": 110, "1985": 110, "pg": 110, "la": 110, "arang": [110, 301, 303], "9": [110, 195, 198, 199, 200, 201, 273, 303], "74597": 110, "20": 110, "84804": 110, "41421": 110, "23607": 110, "74166": 110, "24264": 110, "11": 110, "225": 110, "50": 111, "evenli": 111, "return_metadata": 112, "binari": [112, 155, 156, 157, 158, 159, 257, 270, 271, 289], "npy": [112, 155, 305], "safetensor": [112, 157, 236, 240, 302, 305], "gguf": [112, 156, 305], "matadata": 112, "unsupport": 112, "tensor": [112, 182, 271, 283, 303], "natur": [113, 115, 302], "logarithm": [113, 114, 115, 116], "log": [115, 117, 121, 274, 277, 279, 281], "plu": 115, "exp": [117, 121, 142, 167, 253, 277, 287, 306], "stabl": [117, 121, 167, 279], "prepend": 122, "remov": [122, 141, 172, 273], "negat": 130, "beforehand": 134, "pad_with": 135, "constant_valu": 135, "pad_width": 135, "before_1": 135, "after_1": 135, "before_2": 135, "after_2": 135, "before_n": 135, "after_n": 135, "before_i": 135, "after_i": 135, "extend": 135, "side": 135, "smaller": [136, 201], "everi": [138, 164, 207, 300], "particular": [138, 224], "consecut": [138, 252], "w_1": 138, "w_g": 138, "begin": [138, 253, 257, 276, 282, 287, 289], "align": 138, "max_i": 138, "min_i": 138, "textrm": [138, 223, 267], "round": 138, "pack": [138, 139], "unsign": [138, 139, 210], "lower": [138, 145, 148, 149, 184, 266], "upper": [138, 145, 148, 149, 266], "1st": 138, "signific": 138, "2nd": 138, "dequant": 138, "w_q": 138, "whether": [139, 233, 247, 270, 271, 274], "prng": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 297], "num_sampl": 141, "unnorm": [141, 270, 273], "draw": 141, "cdf": [142, 223, 267], "accord": [142, 191, 247, 260, 261, 262, 263], "seed": 143, "low": [145, 149, 266, 291], "high": [145, 149, 214, 222, 266, 291], "bound": [145, 148, 149, 223, 266, 301, 306], "roadcast": 145, "domain": 148, "uniformli": 149, "repetit": 151, "preserv": [152, 300], "reciproc": 154, "arr": [155, 301], "obj": 156, "uncompress": 158, "my_path": 158, "tree_flatten": [158, 207, 208, 214], "transformerencod": 158, "128": [158, 214], "flat_param": 158, "compress": 159, "simplif": 164, "reus": 164, "consumpt": 164, "meant": 164, "overhead": [164, 302, 306], "1m": 164, "thousand": [164, 302], "foo": 164, "matmul": [164, 306], "twice": [164, 306], "possibl": [169, 222, 301, 306], "subarrai": 169, "being": [174, 214], "prevent": [174, 271, 283, 303], "flow": [174, 302], "unchang": [174, 252], "axis1": 177, "axis2": 177, "taken": 178, "prior": [178, 179], "exclud": 179, "dot": [182, 206, 238, 247], "elsewher": [184, 301], "col": 184, "triangl": 184, "mse": 187, "param": [187, 214, 291, 300], "lvalu": 187, "dlvalu": 187, "dparam": 187, "lasso": 187, "l1": [187, 276, 278, 279, 282], "varianc": [188, 216, 224, 274], "divisor": 188, "cotang": 189, "in_ax": [190, 300], "out_ax": [190, 300], "prefix": [190, 206], "fn": [194, 207, 304], "callabl": [194, 206, 207, 229, 230, 233, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266], "wrt": 194, "rho": 195, "06": [195, 271, 274, 283], "paper": [195, 196, 197, 198, 200, 201, 216, 256], "zeiler": 195, "2012": [195, 204], "adapt": [195, 196, 197], "1212": 195, "5701": 195, "v_": [195, 197, 198, 199, 200, 204, 205], "v_t": [195, 197, 198, 199, 200, 204, 205], "g_t": [195, 197, 198, 199, 200, 201, 204, 205], "delta": [195, 276], "w_": [195, 196, 197, 198, 199, 200, 201, 204, 205], "u_t": 195, "epsilon": [195, 197, 198, 199, 200, 204, 216, 224, 225, 226, 250, 271, 272, 274], "u_": 195, "w_t": [195, 197, 198, 199, 200, 201, 204, 205], "lambda": [195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 214, 229, 234, 253, 287, 300], "averag": [195, 196, 198, 199, 200], "denomin": [195, 197, 198, 199, 200, 204, 225, 272], "stabil": [195, 196, 197, 198, 199, 200, 204, 216, 224, 225, 226, 250, 272, 274], "30": 196, "001": 196, "clip_threshold": 196, "decay_r": 196, "beta_1": [196, 198, 199, 200, 201], "weight_decai": [196, 199, 201, 205], "scale_paramet": 196, "relative_step": 196, "warmup_init": 196, "sublinear": 196, "cost": [196, 302], "epsilon_1": 196, "epsilon_2": 196, "parameter_scal": 196, "clip": 196, "unscal": 196, "decai": [196, 199, 201, 205], "duchi": 197, "hazan": 197, "singer": 197, "2011": 197, "subgradi": 197, "onlin": 197, "stochast": [197, 198, 200, 205, 302], "jmlr": 197, "999": [198, 199, 200], "omit": [198, 200], "estim": [198, 200], "kingma": [198, 200], "ba": [198, 200], "2015": [198, 200, 220], "iclr": [198, 199, 200], "m_": [198, 199, 200, 201], "m_t": [198, 199, 200, 201], "beta_2": [198, 199, 200, 201], "contrast": [199, 203, 271], "loshchilov": 199, "hutter": 199, "decoupl": 199, "regular": [199, 220, 228, 284, 301], "adam": [200, 201], "99": [201, 204], "sign": [201, 210], "tend": 201, "larger": [201, 252], "10x": 201, "adamw": 201, "maintain": [201, 220, 221], "strength": [201, 205], "wd": 201, "chen": 201, "symbol": 201, "discoveri": 201, "2302": 201, "06675": 201, "c_": 201, "eta": 201, "c_t": 201, "momentum": [201, 205, 216], "basi": 202, "appli": [202, 207, 214, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 230, 241, 248, 249, 250, 251, 253, 255, 257, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291], "optimizerst": 202, "recurs": [203, 214, 233, 234, 239, 242, 244, 294], "defaultdict": 203, "miss": [203, 236, 305], "present": 203, "tieleman": 204, "hinton": 204, "lectur": 204, "coursera": 204, "smooth": [204, 273, 282], "dampen": 205, "nesterov": 205, "descent": [205, 302], "mu": 205, "tau": 205, "l2": [205, 276, 279], "penalti": 205, "is_leaf": [206, 207], "arbitrari": [206, 294], "depth": [206, 221, 300], "hello": [206, 208], "charact": 206, "flat": [206, 208], "superset": 207, "extra": 207, "closer": 207, "constitut": 207, "dict_kei": 207, "recreat": 208, "world": 208, "42": 208, "byte": 210, "bool_": 210, "uint8": 210, "uint16": 210, "16": [210, 225, 229, 294], "uint64": 210, "int8": 210, "int16": 210, "int64": 210, "arbitrarili": [214, 299, 300, 304], "done": [214, 219, 302, 303], "manual": 214, "explicitli": [214, 297], "solv": 214, "intuit": 214, "freez": [214, 244, 294], "finetun": 214, "in_dim": [214, 294], "out_dim": [214, 294], "enumer": 214, "caus": [214, 302], "local": [214, 220], "scope": 214, "l2_loss": 214, "y_hat": 214, "trainable_paramet": [214, 233], "loss_and_grad": 214, "workhors": 214, "Its": 214, "frozen": [214, 234, 242, 244, 249, 294], "individu": [214, 220, 221], "subset": [214, 233], "action": 214, "displai": 214, "tree_map": 214, "count": 214, "num_param": 214, "preclud": 214, "pure": [214, 296], "pattern": [214, 302], "achiev": 214, "other_input": 214, "necessari": 214, "wrap": 214, "apply_to_modul": [214, 234], "children": 214, "filter_and_map": 214, "leaf_modul": 214, "load_weight": [214, 302], "named_modul": 214, "save_weight": 214, "unfreez": [214, 234], "update_modul": 214, "alibi": 214, "batchnorm": 214, "conv1d": 214, "conv2d": 214, "dropout": [214, 220, 221, 241, 258], "dropout2d": 214, "dropout3d": 214, "gelu": [214, 268, 269], "groupnorm": 214, "instancenorm": 214, "layernorm": 214, "mish": 214, "prelu": 214, "quantizedlinear": 214, "relu": [214, 248, 258, 285, 291], "_cos_sin_theta_kei": [214, 252], "_cos_sin_theta_valu": [214, 252], "selu": 214, "sequenti": [214, 291], "silu": 214, "sinusoidalpositionalencod": 214, "gelu_approx": [214, 223, 267], "gelu_fast_approx": [214, 223, 267], "binary_cross_entropi": 214, "contrastive_loss": 214, "cosine_similarity_loss": 214, "gaussian_nll_loss": 214, "hinge_loss": 214, "huber_loss": 214, "kl_div_loss": 214, "l1_loss": 214, "log_cosh_loss": 214, "mse_loss": 214, "nll_loss": 214, "smooth_l1_loss": 214, "triplet_loss": 214, "init": [214, 248, 291], "uniform": [214, 227, 236, 261, 263, 291, 297, 300, 306], "glorot_norm": 214, "glorot_uniform": 214, "he_norm": 214, "he_uniform": 214, "affin": [216, 224, 225, 226, 227, 249], "track_running_stat": 216, "var": [216, 224, 225, 226, 274], "gamma": [216, 224, 225, 226, 250, 260, 261, 262, 263], "nc": 216, "nlc": [216, 217], "four": 216, "nhwc": [216, 218], "height": [216, 218, 220, 221], "width": [216, 218, 220, 221, 249], "deep": [216, 260, 261, 262, 263], "intern": 216, "covari": 216, "shift": 216, "bn": 216, "in_channel": [217, 218], "out_channel": [217, 218], "kernel_s": [217, 218], "learnabl": [217, 218, 254], "portion": 219, "dure": [219, 220, 221, 303], "independ": [220, 221], "nwhc": 220, "whc": 220, "entri": [220, 221], "benefici": [220, 221, 302], "earli": 220, "adjac": 220, "pixel": 220, "correl": 220, "thompson": 220, "goroshin": 220, "jain": 220, "lecun": 220, "bregler": 220, "cvpr": 220, "ndhwc": 221, "dhwc": 221, "medic": 221, "video": 221, "num_embed": 222, "lookup": 222, "typic": [222, 296, 302], "usual": [222, 299, 302], "vocabulari": 222, "approx": 223, "unit": [223, 251, 253, 255, 260, 261, 262, 263, 267, 268, 269, 286, 287, 288], "phi": [223, 267], "geluapprox": 223, "sigma": [223, 255, 260, 261, 262, 263, 268, 269, 288], "60033": [223, 268], "0433603": [223, 268], "gelufast": 223, "773": [223, 269], "regard": 223, "num_group": 224, "pytorch_compat": 224, "split": 224, "preced": 224, "http": [224, 225, 226, 228, 250, 284], "org": [224, 225, 226, 228, 250, 284], "1803": 224, "08494": 224, "inorm": 225, "1607": [225, 226], "08022": 225, "06450": 226, "mathcal": 227, "d_i": 227, "monoton": [228, 284], "1908": [228, 284], "08681": [228, 284], "tanh": [228, 284], "softplu": [228, 284], "map_fn": [229, 233], "filter_fn": [229, 233], "valid_parameter_filt": 229, "apply_fn": 230, "descend": 231, "is_leaf_fn": 233, "found": 233, "drop": 233, "idempot": [234, 244], "attent": [234, 247, 256, 258], "endswith": 234, "file_or_weight": 236, "ok": [236, 300], "save_safetensor": [240, 305], "certain": 241, "ie": 244, "noop": 244, "unfrozen": 244, "chang": [245, 249, 276, 282, 303], "tracer": 245, "partial": [245, 246, 302], "child": 246, "flexibli": 246, "programmat": 246, "query_input_dim": 247, "key_input_dim": 247, "value_input_dim": 247, "value_dim": 247, "value_output_dim": 247, "head": [247, 258], "aggreg": 247, "linearli": 247, "attend": 247, "num_paramet": 248, "25": 248, "parametr": [248, 285], "classmethod": 249, "from_linear": 249, "quantize_modul": 249, "1910": 250, "07467": 250, "rectifi": [251, 262, 263, 286], "10000": 252, "rotat": 252, "slightli": [252, 306], "angular": 252, "frequenc": [252, 256], "precomput": 252, "leq": [253, 276, 287], "0507": [253, 287], "67326": [253, 287], "elu": [253, 287], "plain": 254, "known": [255, 288], "swish": [255, 288], "cdot": [255, 268, 269, 272, 275, 288], "min_freq": 256, "0001": 256, "max_freq": 256, "cos_first": 256, "full_turn": 256, "sinusoid": 256, "sin": [256, 300, 304], "threshold": [257, 276, 282, 289], "geq": [257, 289], "num_encoder_lay": 258, "num_decoder_lay": 258, "custom_encod": 258, "custom_decod": 258, "norm_first": 258, "decod": 258, "interact": 258, "mechan": 258, "hidden": 258, "init_fn": [259, 260, 261, 262, 263, 264, 265, 266, 291], "glorot": [260, 261], "deviat": [260, 262, 265], "fan_in": [260, 261, 262, 263], "fan_out": [260, 261, 262, 263], "difficulti": [260, 261], "feedforward": [260, 261], "191107": 260, "61278": 260, "150594": 260, "363207": 260, "gain": [260, 261, 262, 263], "89613": 260, "53947": 260, "48095": 260, "995016": 260, "223404": 261, "890597": 261, "379159": 261, "776856": 261, "90041": 261, "02264": 261, "912766": 261, "12451": 261, "fan": [262, 263], "delv": [262, 263], "surpass": [262, 263], "human": [262, 263], "level": [262, 263], "imagenet": [262, 263], "classif": [262, 263], "25211": 262, "458835": 262, "177208": 262, "0137595": 262, "6967": 262, "02765": 262, "15268": 262, "75787": 262, "kaim": 263, "0300242": 263, "0184009": 263, "793615": 263, "666329": 263, "64331": 263, "16506": 263, "08619": 263, "79854": 263, "982273": 265, "534422": 265, "380709": 265, "0645099": 265, "883935": 266, "863726": 266, "617261": 266, "417497": 266, "exact": [268, 269], "0003": 268, "015": 269, "with_logit": 270, "predict": [270, 274, 275, 276, 277, 278, 279, 280, 281, 282], "105361": 270, "223144": 270, "20397": 270, "916291": 270, "539245": 270, "prob": 270, "510826": 270, "x1": [271, 272], "x2": [271, 272], "margin": [271, 283], "instabl": [271, 283], "x_1": [271, 272], "x_2": [271, 272], "_2": 271, "label_smooth": 273, "hot": 273, "0485873": 273, "348587": 273, "likelihood": [274, 281], "nll": [274, 281], "hing": 275, "y_": [275, 279], "pred": [275, 279], "huber": 276, "l_": 276, "kullback": 277, "leibler": 277, "diverg": 277, "cosh": 279, "logcosh": 279, "sensit": 279, "outlier": 279, "dual": 279, "behavior": [279, 301, 302], "offer": 279, "balanc": 279, "robust": 279, "approach": [279, 300], "task": 279, "formula": 282, "anchor": 283, "triplet": 283, "_p": 283, "degre": 283, "pairwis": 283, "subclass": 294, "concept": 294, "mymlp": 294, "in_proj": 294, "subsequ": 296, "implicit": [297, 300], "fine": [297, 302], "grain": 297, "control": [297, 302], "manag": [297, 306], "pseudo": 297, "altern": 297, "splittabl": 297, "threefri": 297, "counter": 297, "cycl": 299, "idea": [300, 302], "behind": 300, "dfdx": [300, 301], "d2fdx2": 300, "differentiaion": 300, "backward": 300, "zero_grad": 300, "detach": 300, "requires_grad": 300, "dloss_dw": 300, "dloss_dx": 300, "lot": 300, "redund": 300, "suppos": [300, 306], "nice": [300, 302], "propag": [300, 301], "stop_gradi": 300, "autom": 300, "contriv": [300, 306], "sake": 300, "clariti": 300, "quit": [300, 303], "power": [300, 303], "difficult": 300, "primit": 300, "issu": [300, 303], "priorit": 300, "4096": [300, 306], "naive_add": 300, "vmap_add": 300, "timeit": 300, "On": [300, 302], "total": 300, "390": 300, "wherea": 300, "025": 300, "ten": [300, 302], "Of": 300, "better": [300, 306], "handi": 300, "slice": 301, "ellipsi": 301, "syntax": 301, "idx": 301, "mix": 301, "take_along_axi": 301, "lack": 301, "extrem": [301, 302], "ineffici": [301, 302], "nonzero": 301, "reflect": [301, 303], "record": 302, "rerun": 302, "dynam": 302, "easier": 302, "worri": 302, "fun1": 302, "expensive_fun": 302, "code": 302, "consum": 302, "eager": 302, "thank": 302, "weights_fp16": 302, "trade": 302, "too": 302, "bad": 302, "grow": 302, "computation": 302, "costli": 302, "wide": 302, "pretti": 302, "okai": 302, "outer": 302, "value_and_grad_fn": 302, "awar": 302, "implicitli": 302, "anytim": 302, "memoryview": [302, 303], "perfectli": 302, "first_lay": 302, "second_layer_a": 302, "second_layer_b": 302, "frequent": 302, "protocol": 303, "receiv": 303, "pep": 303, "3118": 303, "view": 303, "a_view": 303, "owndata": 303, "extern": 303, "x_view": 303, "modifi": 303, "df": 303, "x\u00b2": 303, "2x": 303, "indirectli": 303, "modif": 303, "seen": 303, "occur": 303, "incorpor": 303, "incorrect": 303, "experiment": 303, "break": 303, "advis": 303, "intermedi": 303, "jnp": 303, "tf": 303, "inspect": 304, "page": 304, "composit": 304, "archiv": 305, "savez_compress": 305, "save_gguf": 305, "arr_0": 305, "pool": 306, "advantag": 306, "don": 306, "parallel": 306, "race": 306, "interest": 306, "albeit": 306, "d1": 306, "d2": 306, "dens": 306, "millisecond": 306, "measur": 306, "default_stream": 307, "default_devic": 307, "my_devic": 307}, "objects": {"mlx.core": [[7, 0, 1, "", "Device"], [8, 0, 1, "", "Dtype"], [9, 0, 1, "", "Stream"], [10, 2, 1, "", "abs"], [11, 2, 1, "", "add"], [12, 2, 1, "", "all"], [13, 2, 1, "", "allclose"], [14, 2, 1, "", "any"], [15, 2, 1, "", "arange"], [16, 2, 1, "", "arccos"], [17, 2, 1, "", "arccosh"], [18, 2, 1, "", "arcsin"], [19, 2, 1, "", "arcsinh"], [20, 2, 1, "", "arctan"], [21, 2, 1, "", "arctanh"], [22, 2, 1, "", "argmax"], [23, 2, 1, "", "argmin"], [24, 2, 1, "", "argpartition"], [25, 2, 1, "", "argsort"], [26, 0, 1, "", "array"], [60, 2, 1, "", "array_equal"], [61, 2, 1, "", "broadcast_to"], [62, 2, 1, "", "ceil"], [63, 2, 1, "", "clip"], [64, 2, 1, "", "concatenate"], [65, 2, 1, "", "conv1d"], [66, 2, 1, "", "conv2d"], [67, 2, 1, "", "convolve"], [68, 2, 1, "", "cos"], [69, 2, 1, "", "cosh"], [70, 2, 1, "", "default_device"], [71, 2, 1, "", "default_stream"], [72, 2, 1, "", "dequantize"], [73, 2, 1, "", "divide"], [74, 2, 1, "", "divmod"], [75, 2, 1, "", "equal"], [76, 2, 1, "", "erf"], [77, 2, 1, "", "erfinv"], [78, 2, 1, "", "eval"], [79, 2, 1, "", "exp"], [80, 2, 1, "", "expand_dims"], [81, 2, 1, "", "eye"], [94, 2, 1, "", "flatten"], [95, 2, 1, "", "floor"], [96, 2, 1, "", "floor_divide"], [97, 2, 1, "", "full"], [98, 2, 1, "", "grad"], [99, 2, 1, "", "greater"], [100, 2, 1, "", "greater_equal"], [101, 2, 1, "", "identity"], [102, 2, 1, "", "inner"], [103, 2, 1, "", "isinf"], [104, 2, 1, "", "isnan"], [105, 2, 1, "", "isneginf"], [106, 2, 1, "", "isposinf"], [107, 2, 1, "", "jvp"], [108, 2, 1, "", "less"], [109, 2, 1, "", "less_equal"], [111, 2, 1, "", "linspace"], [112, 2, 1, "", "load"], [113, 2, 1, "", "log"], [114, 2, 1, "", "log10"], [115, 2, 1, "", "log1p"], [116, 2, 1, "", "log2"], [117, 2, 1, "", "logaddexp"], [118, 2, 1, "", "logical_and"], [119, 2, 1, "", "logical_not"], [120, 2, 1, "", "logical_or"], [121, 2, 1, "", "logsumexp"], [122, 2, 1, "", "matmul"], [123, 2, 1, "", "max"], [124, 2, 1, "", "maximum"], [125, 2, 1, "", "mean"], [126, 2, 1, "", "min"], [127, 2, 1, "", "minimum"], [128, 2, 1, "", "moveaxis"], [129, 2, 1, "", "multiply"], [130, 2, 1, "", "negative"], [131, 2, 1, "", "new_stream"], [132, 2, 1, "", "ones"], [133, 2, 1, "", "ones_like"], [134, 2, 1, "", "outer"], [135, 2, 1, "", "pad"], [136, 2, 1, "", "partition"], [137, 2, 1, "", "prod"], [138, 2, 1, "", "quantize"], [139, 2, 1, "", "quantized_matmul"], [150, 2, 1, "", "reciprocal"], [151, 2, 1, "", "repeat"], [152, 2, 1, "", "reshape"], [153, 2, 1, "", "round"], [154, 2, 1, "", "rsqrt"], [155, 2, 1, "", "save"], [156, 2, 1, "", "save_gguf"], [157, 2, 1, "", "save_safetensors"], [158, 2, 1, "", "savez"], [159, 2, 1, "", "savez_compressed"], [160, 2, 1, "", "set_default_device"], [161, 2, 1, "", "set_default_stream"], [162, 2, 1, "", "sigmoid"], [163, 2, 1, "", "sign"], [164, 2, 1, "", "simplify"], [165, 2, 1, "", "sin"], [166, 2, 1, "", "sinh"], [167, 2, 1, "", "softmax"], [168, 2, 1, "", "sort"], [169, 2, 1, "", "split"], [170, 2, 1, "", "sqrt"], [171, 2, 1, "", "square"], [172, 2, 1, "", "squeeze"], [173, 2, 1, "", "stack"], [174, 2, 1, "", "stop_gradient"], [175, 2, 1, "", "subtract"], [176, 2, 1, "", "sum"], [177, 2, 1, "", "swapaxes"], [178, 2, 1, "", "take"], [179, 2, 1, "", "take_along_axis"], [180, 2, 1, "", "tan"], [181, 2, 1, "", "tanh"], [182, 2, 1, "", "tensordot"], [183, 2, 1, "", "transpose"], [184, 2, 1, "", "tri"], [185, 2, 1, "", "tril"], [186, 2, 1, "", "triu"], [187, 2, 1, "", "value_and_grad"], [188, 2, 1, "", "var"], [189, 2, 1, "", "vjp"], [190, 2, 1, "", "vmap"], [191, 2, 1, "", "where"], [192, 2, 1, "", "zeros"], [193, 2, 1, "", "zeros_like"]], "mlx.core.Device": [[7, 1, 1, "", "__init__"]], "mlx.core.Dtype": [[8, 1, 1, "", "__init__"]], "mlx.core.Stream": [[9, 1, 1, "", "__init__"]], "mlx.core.array": [[27, 3, 1, "", "T"], [26, 1, 1, "", "__init__"], [28, 1, 1, "", "abs"], [29, 1, 1, "", "all"], [30, 1, 1, "", "any"], [31, 1, 1, "", "argmax"], [32, 1, 1, "", "argmin"], [33, 1, 1, "", "astype"], [34, 1, 1, "", "cos"], [35, 3, 1, "", "dtype"], [36, 1, 1, "", "exp"], [37, 1, 1, "", "item"], [38, 1, 1, "", "log"], [39, 1, 1, "", "log1p"], [40, 1, 1, "", "logsumexp"], [41, 1, 1, "", "max"], [42, 1, 1, "", "mean"], [43, 1, 1, "", "min"], [44, 3, 1, "", "ndim"], [45, 1, 1, "", "prod"], [46, 1, 1, "", "reciprocal"], [47, 1, 1, "", "reshape"], [48, 1, 1, "", "round"], [49, 1, 1, "", "rsqrt"], [50, 3, 1, "", "shape"], [51, 1, 1, "", "sin"], [52, 3, 1, "", "size"], [53, 1, 1, "", "split"], [54, 1, 1, "", "sqrt"], [55, 1, 1, "", "square"], [56, 1, 1, "", "sum"], [57, 1, 1, "", "tolist"], [58, 1, 1, "", "transpose"], [59, 1, 1, "", "var"]], "mlx.core.fft": [[82, 2, 1, "", "fft"], [83, 2, 1, "", "fft2"], [84, 2, 1, "", "fftn"], [85, 2, 1, "", "ifft"], [86, 2, 1, "", "ifft2"], [87, 2, 1, "", "ifftn"], [88, 2, 1, "", "irfft"], [89, 2, 1, "", "irfft2"], [90, 2, 1, "", "irfftn"], [91, 2, 1, "", "rfft"], [92, 2, 1, "", "rfft2"], [93, 2, 1, "", "rfftn"]], "mlx.core.linalg": [[110, 2, 1, "", "norm"]], "mlx.core.random": [[140, 2, 1, "", "bernoulli"], [141, 2, 1, "", "categorical"], [142, 2, 1, "", "gumbel"], [143, 2, 1, "", "key"], [144, 2, 1, "", "normal"], [145, 2, 1, "", "randint"], [146, 2, 1, "", "seed"], [147, 2, 1, "", "split"], [148, 2, 1, "", "truncated_normal"], [149, 2, 1, "", "uniform"]], "mlx.nn": [[215, 0, 1, "", "ALiBi"], [216, 0, 1, "", "BatchNorm"], [217, 0, 1, "", "Conv1d"], [218, 0, 1, "", "Conv2d"], [219, 0, 1, "", "Dropout"], [220, 0, 1, "", "Dropout2d"], [221, 0, 1, "", "Dropout3d"], [222, 0, 1, "", "Embedding"], [223, 0, 1, "", "GELU"], [224, 0, 1, "", "GroupNorm"], [225, 0, 1, "", "InstanceNorm"], [226, 0, 1, "", "LayerNorm"], [227, 0, 1, "", "Linear"], [228, 0, 1, "", "Mish"], [294, 0, 1, "", "Module"], [247, 0, 1, "", "MultiHeadAttention"], [248, 0, 1, "", "PReLU"], [249, 0, 1, "", "QuantizedLinear"], [250, 0, 1, "", "RMSNorm"], [251, 0, 1, "", "ReLU"], [252, 0, 1, "", "RoPE"], [253, 0, 1, "", "SELU"], [254, 0, 1, "", "Sequential"], [255, 0, 1, "", "SiLU"], [256, 0, 1, "", "SinusoidalPositionalEncoding"], [257, 0, 1, "", "Step"], [258, 0, 1, "", "Transformer"], [267, 0, 1, "", "gelu"], [268, 0, 1, "", "gelu_approx"], [269, 0, 1, "", "gelu_fast_approx"], [284, 0, 1, "", "mish"], [285, 0, 1, "", "prelu"], [286, 0, 1, "", "relu"], [287, 0, 1, "", "selu"], [288, 0, 1, "", "silu"], [289, 0, 1, "", "step"], [194, 2, 1, "", "value_and_grad"]], "mlx.nn.Module": [[229, 1, 1, "", "apply"], [230, 1, 1, "", "apply_to_modules"], [231, 1, 1, "", "children"], [232, 1, 1, "", "eval"], [233, 1, 1, "", "filter_and_map"], [234, 1, 1, "", "freeze"], [235, 1, 1, "", "leaf_modules"], [236, 1, 1, "", "load_weights"], [237, 1, 1, "", "modules"], [238, 1, 1, "", "named_modules"], [239, 1, 1, "", "parameters"], [240, 1, 1, "", "save_weights"], [241, 1, 1, "", "train"], [242, 1, 1, "", "trainable_parameters"], [243, 3, 1, "", "training"], [244, 1, 1, "", "unfreeze"], [245, 1, 1, "", "update"], [246, 1, 1, "", "update_modules"]], "mlx.nn.RoPE": [[252, 4, 1, "", "_cos_sin_theta_key"], [252, 4, 1, "", "_cos_sin_theta_value"]], "mlx.nn.init": [[259, 2, 1, "", "constant"], [260, 2, 1, "", "glorot_normal"], [261, 2, 1, "", "glorot_uniform"], [262, 2, 1, "", "he_normal"], [263, 2, 1, "", "he_uniform"], [264, 2, 1, "", "identity"], [265, 2, 1, "", "normal"], [266, 2, 1, "", "uniform"]], "mlx.nn.losses": [[270, 0, 1, "", "binary_cross_entropy"], [271, 0, 1, "", "contrastive_loss"], [272, 0, 1, "", "cosine_similarity_loss"], [273, 0, 1, "", "cross_entropy"], [274, 0, 1, "", "gaussian_nll_loss"], [275, 0, 1, "", "hinge_loss"], [276, 0, 1, "", "huber_loss"], [277, 0, 1, "", "kl_div_loss"], [278, 0, 1, "", "l1_loss"], [279, 0, 1, "", "log_cosh_loss"], [280, 0, 1, "", "mse_loss"], [281, 0, 1, "", "nll_loss"], [282, 0, 1, "", "smooth_l1_loss"], [283, 0, 1, "", "triplet_loss"]], "mlx.optimizers": [[195, 0, 1, "", "AdaDelta"], [196, 0, 1, "", "Adafactor"], [197, 0, 1, "", "Adagrad"], [198, 0, 1, "", "Adam"], [199, 0, 1, "", "AdamW"], [200, 0, 1, "", "Adamax"], [201, 0, 1, "", "Lion"], [202, 0, 1, "", "Optimizer"], [203, 0, 1, "", "OptimizerState"], [204, 0, 1, "", "RMSprop"], [205, 0, 1, "", "SGD"]], "mlx.optimizers.Optimizer": [[202, 4, 1, "", "state"]], "mlx.utils": [[206, 2, 1, "", "tree_flatten"], [207, 2, 1, "", "tree_map"], [208, 2, 1, "", "tree_unflatten"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:property", "4": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"oper": [0, 1, 295], "develop": 1, "document": 1, "introduc": 1, "exampl": [1, 5, 306], "primit": 1, "us": [1, 302, 307], "implement": [1, 3], "cpu": 1, "backend": 1, "gpu": 1, "transform": [1, 258, 298, 300, 302, 304], "build": [1, 6], "bind": 1, "python": [1, 5, 6], "cmake": 1, "setuptool": 1, "usag": [1, 5], "result": 1, "script": [1, 3], "download": [1, 3], "code": [1, 3], "linear": [2, 213, 227], "regress": 2, "llm": 3, "infer": 3, "model": 3, "attent": 3, "layer": [3, 4, 292], "encod": 3, "full": [3, 97], "gener": 3, "put": 3, "all": [3, 12, 29], "togeth": 3, "convert": 3, "weight": 3, "load": [3, 112, 305], "benchmark": 3, "multi": 4, "perceptron": 4, "mlx": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "instal": [5, 6], "api": [5, 6], "refer": 5, "c": [5, 6], "further": 5, "read": 5, "troubleshoot": 6, "from": [6, 301], "sourc": 6, "requir": 6, "option": 6, "metal": 6, "found": 6, "x86": 6, "shell": 6, "core": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "devic": [7, 211], "dtype": [8, 35], "stream": [9, 211, 307], "ab": [10, 28], "add": 11, "allclos": 13, "ani": [14, 30], "arang": 15, "arcco": 16, "arccosh": 17, "arcsin": 18, "arcsinh": 19, "arctan": 20, "arctanh": 21, "argmax": [22, 31], "argmin": [23, 32], "argpartit": 24, "argsort": 25, "arrai": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 209, 301, 305], "t": 27, "astyp": 33, "co": [34, 68], "exp": [36, 79], "item": 37, "log": [38, 113], "log1p": [39, 115], "logsumexp": [40, 121], "max": [41, 123], "mean": [42, 125], "min": [43, 126], "ndim": 44, "prod": [45, 137], "reciproc": [46, 150], "reshap": [47, 152], "round": [48, 153], "rsqrt": [49, 154], "shape": 50, "sin": [51, 165], "size": 52, "split": [53, 147, 169], "sqrt": [54, 170], "squar": [55, 171], "sum": [56, 176], "tolist": 57, "transpos": [58, 183], "var": [59, 188], "array_equ": 60, "broadcast_to": 61, "ceil": 62, "clip": 63, "concaten": 64, "conv1d": [65, 217], "conv2d": [66, 218], "convolv": 67, "cosh": 69, "default_devic": 70, "default_stream": 71, "dequant": 72, "divid": 73, "divmod": 74, "equal": 75, "erf": 76, "erfinv": 77, "eval": [78, 232], "expand_dim": 80, "ey": 81, "fft": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 212], "fft2": 83, "fftn": 84, "ifft": 85, "ifft2": 86, "ifftn": 87, "irfft": 88, "irfft2": 89, "irfftn": 90, "rfft": 91, "rfft2": 92, "rfftn": 93, "flatten": 94, "floor": 95, "floor_divid": 96, "grad": [98, 214], "greater": 99, "greater_equ": 100, "ident": [101, 264], "inner": 102, "isinf": 103, "isnan": 104, "isneginf": 105, "isposinf": 106, "jvp": 107, "less": 108, "less_equ": 109, "linalg": 110, "norm": 110, "linspac": 111, "log10": 114, "log2": 116, "logaddexp": 117, "logical_and": 118, "logical_not": 119, "logical_or": 120, "matmul": 122, "maximum": 124, "minimum": 127, "moveaxi": 128, "multipli": 129, "neg": 130, "new_stream": 131, "ones": 132, "ones_lik": 133, "outer": 134, "pad": 135, "partit": 136, "quantiz": 138, "quantized_matmul": 139, "random": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 297], "bernoulli": 140, "categor": 141, "gumbel": 142, "kei": 143, "normal": [144, 265], "randint": 145, "seed": 146, "truncated_norm": 148, "uniform": [149, 266], "repeat": 151, "save": [155, 305], "save_gguf": 156, "save_safetensor": 157, "savez": 158, "savez_compress": 159, "set_default_devic": 160, "set_default_stream": 161, "sigmoid": 162, "sign": 163, "simplifi": 164, "sinh": 166, "softmax": 167, "sort": 168, "squeez": 172, "stack": 173, "stop_gradi": 174, "subtract": 175, "swapax": 177, "take": 178, "take_along_axi": 179, "tan": 180, "tanh": 181, "tensordot": 182, "tri": 184, "tril": 185, "triu": 186, "value_and_grad": [187, 194], "vjp": 189, "vmap": 190, "where": 191, "zero": 192, "zeros_lik": 193, "nn": [194, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "optim": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 296], "adadelta": 195, "adafactor": 196, "adagrad": 197, "adam": 198, "adamw": 199, "adamax": 200, "lion": 201, "optimizerst": 203, "rmsprop": 204, "sgd": 205, "util": [206, 207, 208, 299], "tree_flatten": 206, "tree_map": 207, "tree_unflatten": 208, "data": 210, "type": 210, "support": 210, "algebra": 213, "neural": 214, "network": 214, "quick": [214, 304], "start": [214, 304], "The": 214, "modul": [214, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 294], "class": 214, "paramet": [214, 239], "updat": [214, 245, 301], "inspect": 214, "valu": 214, "alibi": 215, "batchnorm": 216, "dropout": 219, "dropout2d": 220, "dropout3d": 221, "embed": 222, "gelu": [223, 267], "groupnorm": 224, "instancenorm": 225, "layernorm": 226, "mish": [228, 284], "appli": 229, "apply_to_modul": 230, "children": 231, "filter_and_map": 233, "freez": 234, "leaf_modul": 235, "load_weight": 236, "named_modul": 238, "save_weight": 240, "train": [241, 243], "trainable_paramet": 242, "unfreez": 244, "update_modul": 246, "multiheadattent": 247, "prelu": [248, 285], "quantizedlinear": 249, "rmsnorm": 250, "relu": [251, 286], "rope": 252, "selu": [253, 287], "sequenti": 254, "silu": [255, 288], "sinusoidalpositionalencod": 256, "step": [257, 289], "init": [259, 260, 261, 262, 263, 264, 265, 266], "constant": 259, "glorot_norm": 260, "glorot_uniform": 261, "he_norm": 262, "he_uniform": 263, "gelu_approx": 268, "gelu_fast_approx": 269, "loss": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 293], "binary_cross_entropi": 270, "contrastive_loss": 271, "cosine_similarity_loss": 272, "cross_entropi": 273, "gaussian_nll_loss": 274, "hinge_loss": 275, "huber_loss": 276, "kl_div_loss": 277, "l1_loss": 278, "log_cosh_loss": 279, "mse_loss": 280, "nll_loss": 281, "smooth_l1_loss": 282, "triplet_loss": 283, "function": [290, 293, 300, 304], "initi": 291, "tree": 299, "automat": 300, "differenti": 300, "vector": 300, "index": 301, "differ": 301, "numpi": [301, 303], "In": 301, "place": 301, "lazi": 302, "evalu": 302, "why": 302, "comput": 302, "graph": [302, 304], "onli": 302, "what": 302, "you": 302, "when": 302, "convers": 303, "other": 303, "framework": 303, "pytorch": 303, "jax": 303, "tensorflow": 303, "guid": 304, "basic": 304, "serial": 305, "format": 305, "unifi": 306, "memori": 306, "A": 306, "simpl": 306, "specifi": 307}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operations": [[0, "operations"], [1, "operations"], [295, "operations"]], "Developer Documentation": [[1, "developer-documentation"]], "Introducing the Example": [[1, "introducing-the-example"]], "Operations and Primitives": [[1, "operations-and-primitives"]], "Primitives": [[1, "primitives"]], "Using the Primitives": [[1, "using-the-primitives"]], "Implementing the Primitive": [[1, "implementing-the-primitive"]], "Implementing the CPU Backend": [[1, "implementing-the-cpu-backend"]], "Implementing the GPU Backend": [[1, "implementing-the-gpu-backend"]], "Primitive Transforms": [[1, "primitive-transforms"]], "Building and Binding": [[1, "building-and-binding"]], "Binding to Python": [[1, "binding-to-python"]], "Building with CMake": [[1, "building-with-cmake"]], "Building with setuptools": [[1, "building-with-setuptools"]], "Usage": [[1, "usage"], [5, null]], "Results": [[1, "results"]], "Scripts": [[1, "scripts"], [3, "scripts"]], "Download the code": [[1, null], [3, null]], "Linear Regression": [[2, "linear-regression"]], "LLM inference": [[3, "llm-inference"]], "Implementing the model": [[3, "implementing-the-model"]], "Attention layer": [[3, "attention-layer"]], "Encoder layer": [[3, "encoder-layer"]], "Full model": [[3, "full-model"]], "Generation": [[3, "generation"]], "Putting it all together": [[3, "putting-it-all-together"]], "Converting the weights": [[3, "converting-the-weights"]], "Weight loading and benchmarking": [[3, "weight-loading-and-benchmarking"]], "Multi-Layer Perceptron": [[4, "multi-layer-perceptron"]], "MLX": [[5, "mlx"]], "Install": [[5, null]], "Examples": [[5, null]], "Python API Reference": [[5, null]], "C++ API Reference": [[5, null]], "Further Reading": [[5, null]], "Build and Install": [[6, "build-and-install"]], "Python Installation": [[6, "python-installation"]], "Troubleshooting": [[6, "troubleshooting"], [6, "id2"]], "Build from source": [[6, "build-from-source"]], "Build Requirements": [[6, "build-requirements"]], "Python API": [[6, "python-api"]], "C++ API": [[6, "c-api"]], "Build Options": [[6, "id3"]], "Metal not found": [[6, "metal-not-found"]], "x86 Shell": [[6, "x86-shell"]], "mlx.core.Device": [[7, "mlx-core-device"]], "mlx.core.Dtype": [[8, "mlx-core-dtype"]], "mlx.core.Stream": [[9, "mlx-core-stream"]], "mlx.core.abs": [[10, "mlx-core-abs"]], "mlx.core.add": [[11, "mlx-core-add"]], "mlx.core.all": [[12, "mlx-core-all"]], "mlx.core.allclose": [[13, "mlx-core-allclose"]], "mlx.core.any": [[14, "mlx-core-any"]], "mlx.core.arange": [[15, "mlx-core-arange"]], "mlx.core.arccos": [[16, "mlx-core-arccos"]], "mlx.core.arccosh": [[17, "mlx-core-arccosh"]], "mlx.core.arcsin": [[18, "mlx-core-arcsin"]], "mlx.core.arcsinh": [[19, "mlx-core-arcsinh"]], "mlx.core.arctan": [[20, "mlx-core-arctan"]], "mlx.core.arctanh": [[21, "mlx-core-arctanh"]], "mlx.core.argmax": [[22, "mlx-core-argmax"]], "mlx.core.argmin": [[23, "mlx-core-argmin"]], "mlx.core.argpartition": [[24, "mlx-core-argpartition"]], "mlx.core.argsort": [[25, "mlx-core-argsort"]], "mlx.core.array": [[26, "mlx-core-array"]], "mlx.core.array.T": [[27, "mlx-core-array-t"]], "mlx.core.array.abs": [[28, "mlx-core-array-abs"]], "mlx.core.array.all": [[29, "mlx-core-array-all"]], "mlx.core.array.any": [[30, "mlx-core-array-any"]], "mlx.core.array.argmax": [[31, "mlx-core-array-argmax"]], "mlx.core.array.argmin": [[32, "mlx-core-array-argmin"]], "mlx.core.array.astype": [[33, "mlx-core-array-astype"]], "mlx.core.array.cos": [[34, "mlx-core-array-cos"]], "mlx.core.array.dtype": [[35, "mlx-core-array-dtype"]], "mlx.core.array.exp": [[36, "mlx-core-array-exp"]], "mlx.core.array.item": [[37, "mlx-core-array-item"]], "mlx.core.array.log": [[38, "mlx-core-array-log"]], "mlx.core.array.log1p": [[39, "mlx-core-array-log1p"]], "mlx.core.array.logsumexp": [[40, "mlx-core-array-logsumexp"]], "mlx.core.array.max": [[41, "mlx-core-array-max"]], "mlx.core.array.mean": [[42, "mlx-core-array-mean"]], "mlx.core.array.min": [[43, "mlx-core-array-min"]], "mlx.core.array.ndim": [[44, "mlx-core-array-ndim"]], "mlx.core.array.prod": [[45, "mlx-core-array-prod"]], "mlx.core.array.reciprocal": [[46, "mlx-core-array-reciprocal"]], "mlx.core.array.reshape": [[47, "mlx-core-array-reshape"]], "mlx.core.array.round": [[48, "mlx-core-array-round"]], "mlx.core.array.rsqrt": [[49, "mlx-core-array-rsqrt"]], "mlx.core.array.shape": [[50, "mlx-core-array-shape"]], "mlx.core.array.sin": [[51, "mlx-core-array-sin"]], "mlx.core.array.size": [[52, "mlx-core-array-size"]], "mlx.core.array.split": [[53, "mlx-core-array-split"]], "mlx.core.array.sqrt": [[54, "mlx-core-array-sqrt"]], "mlx.core.array.square": [[55, "mlx-core-array-square"]], "mlx.core.array.sum": [[56, "mlx-core-array-sum"]], "mlx.core.array.tolist": [[57, "mlx-core-array-tolist"]], "mlx.core.array.transpose": [[58, "mlx-core-array-transpose"]], "mlx.core.array.var": [[59, "mlx-core-array-var"]], "mlx.core.array_equal": [[60, "mlx-core-array-equal"]], "mlx.core.broadcast_to": [[61, "mlx-core-broadcast-to"]], "mlx.core.ceil": [[62, "mlx-core-ceil"]], "mlx.core.clip": [[63, "mlx-core-clip"]], "mlx.core.concatenate": [[64, "mlx-core-concatenate"]], "mlx.core.conv1d": [[65, "mlx-core-conv1d"]], "mlx.core.conv2d": [[66, "mlx-core-conv2d"]], "mlx.core.convolve": [[67, "mlx-core-convolve"]], "mlx.core.cos": [[68, "mlx-core-cos"]], "mlx.core.cosh": [[69, "mlx-core-cosh"]], "mlx.core.default_device": [[70, "mlx-core-default-device"]], "mlx.core.default_stream": [[71, "mlx-core-default-stream"]], "mlx.core.dequantize": [[72, "mlx-core-dequantize"]], "mlx.core.divide": [[73, "mlx-core-divide"]], "mlx.core.divmod": [[74, "mlx-core-divmod"]], "mlx.core.equal": [[75, "mlx-core-equal"]], "mlx.core.erf": [[76, "mlx-core-erf"]], "mlx.core.erfinv": [[77, "mlx-core-erfinv"]], "mlx.core.eval": [[78, "mlx-core-eval"]], "mlx.core.exp": [[79, "mlx-core-exp"]], "mlx.core.expand_dims": [[80, "mlx-core-expand-dims"]], "mlx.core.eye": [[81, "mlx-core-eye"]], "mlx.core.fft.fft": [[82, "mlx-core-fft-fft"]], "mlx.core.fft.fft2": [[83, "mlx-core-fft-fft2"]], "mlx.core.fft.fftn": [[84, "mlx-core-fft-fftn"]], "mlx.core.fft.ifft": [[85, "mlx-core-fft-ifft"]], "mlx.core.fft.ifft2": [[86, "mlx-core-fft-ifft2"]], "mlx.core.fft.ifftn": [[87, "mlx-core-fft-ifftn"]], "mlx.core.fft.irfft": [[88, "mlx-core-fft-irfft"]], "mlx.core.fft.irfft2": [[89, "mlx-core-fft-irfft2"]], "mlx.core.fft.irfftn": [[90, "mlx-core-fft-irfftn"]], "mlx.core.fft.rfft": [[91, "mlx-core-fft-rfft"]], "mlx.core.fft.rfft2": [[92, "mlx-core-fft-rfft2"]], "mlx.core.fft.rfftn": [[93, "mlx-core-fft-rfftn"]], "mlx.core.flatten": [[94, "mlx-core-flatten"]], "mlx.core.floor": [[95, "mlx-core-floor"]], "mlx.core.floor_divide": [[96, "mlx-core-floor-divide"]], "mlx.core.full": [[97, "mlx-core-full"]], "mlx.core.grad": [[98, "mlx-core-grad"]], "mlx.core.greater": [[99, "mlx-core-greater"]], "mlx.core.greater_equal": [[100, "mlx-core-greater-equal"]], "mlx.core.identity": [[101, "mlx-core-identity"]], "mlx.core.inner": [[102, "mlx-core-inner"]], "mlx.core.isinf": [[103, "mlx-core-isinf"]], "mlx.core.isnan": [[104, "mlx-core-isnan"]], "mlx.core.isneginf": [[105, "mlx-core-isneginf"]], "mlx.core.isposinf": [[106, "mlx-core-isposinf"]], "mlx.core.jvp": [[107, "mlx-core-jvp"]], "mlx.core.less": [[108, "mlx-core-less"]], "mlx.core.less_equal": [[109, "mlx-core-less-equal"]], "mlx.core.linalg.norm": [[110, "mlx-core-linalg-norm"]], "mlx.core.linspace": [[111, "mlx-core-linspace"]], "mlx.core.load": [[112, "mlx-core-load"]], "mlx.core.log": [[113, "mlx-core-log"]], "mlx.core.log10": [[114, "mlx-core-log10"]], "mlx.core.log1p": [[115, "mlx-core-log1p"]], "mlx.core.log2": [[116, "mlx-core-log2"]], "mlx.core.logaddexp": [[117, "mlx-core-logaddexp"]], "mlx.core.logical_and": [[118, "mlx-core-logical-and"]], "mlx.core.logical_not": [[119, "mlx-core-logical-not"]], "mlx.core.logical_or": [[120, "mlx-core-logical-or"]], "mlx.core.logsumexp": [[121, "mlx-core-logsumexp"]], "mlx.core.matmul": [[122, "mlx-core-matmul"]], "mlx.core.max": [[123, "mlx-core-max"]], "mlx.core.maximum": [[124, "mlx-core-maximum"]], "mlx.core.mean": [[125, "mlx-core-mean"]], "mlx.core.min": [[126, "mlx-core-min"]], "mlx.core.minimum": [[127, "mlx-core-minimum"]], "mlx.core.moveaxis": [[128, "mlx-core-moveaxis"]], "mlx.core.multiply": [[129, "mlx-core-multiply"]], "mlx.core.negative": [[130, "mlx-core-negative"]], "mlx.core.new_stream": [[131, "mlx-core-new-stream"]], "mlx.core.ones": [[132, "mlx-core-ones"]], "mlx.core.ones_like": [[133, "mlx-core-ones-like"]], "mlx.core.outer": [[134, "mlx-core-outer"]], "mlx.core.pad": [[135, "mlx-core-pad"]], "mlx.core.partition": [[136, "mlx-core-partition"]], "mlx.core.prod": [[137, "mlx-core-prod"]], "mlx.core.quantize": [[138, "mlx-core-quantize"]], "mlx.core.quantized_matmul": [[139, "mlx-core-quantized-matmul"]], "mlx.core.random.bernoulli": [[140, "mlx-core-random-bernoulli"]], "mlx.core.random.categorical": [[141, "mlx-core-random-categorical"]], "mlx.core.random.gumbel": [[142, "mlx-core-random-gumbel"]], "mlx.core.random.key": [[143, "mlx-core-random-key"]], "mlx.core.random.normal": [[144, "mlx-core-random-normal"]], "mlx.core.random.randint": [[145, "mlx-core-random-randint"]], "mlx.core.random.seed": [[146, "mlx-core-random-seed"]], "mlx.core.random.split": [[147, "mlx-core-random-split"]], "mlx.core.random.truncated_normal": [[148, "mlx-core-random-truncated-normal"]], "mlx.core.random.uniform": [[149, "mlx-core-random-uniform"]], "mlx.core.reciprocal": [[150, "mlx-core-reciprocal"]], "mlx.core.repeat": [[151, "mlx-core-repeat"]], "mlx.core.reshape": [[152, "mlx-core-reshape"]], "mlx.core.round": [[153, "mlx-core-round"]], "mlx.core.rsqrt": [[154, "mlx-core-rsqrt"]], "mlx.core.save": [[155, "mlx-core-save"]], "mlx.core.save_gguf": [[156, "mlx-core-save-gguf"]], "mlx.core.save_safetensors": [[157, "mlx-core-save-safetensors"]], "mlx.core.savez": [[158, "mlx-core-savez"]], "mlx.core.savez_compressed": [[159, "mlx-core-savez-compressed"]], "mlx.core.set_default_device": [[160, "mlx-core-set-default-device"]], "mlx.core.set_default_stream": [[161, "mlx-core-set-default-stream"]], "mlx.core.sigmoid": [[162, "mlx-core-sigmoid"]], "mlx.core.sign": [[163, "mlx-core-sign"]], "mlx.core.simplify": [[164, "mlx-core-simplify"]], "mlx.core.sin": [[165, "mlx-core-sin"]], "mlx.core.sinh": [[166, "mlx-core-sinh"]], "mlx.core.softmax": [[167, "mlx-core-softmax"]], "mlx.core.sort": [[168, "mlx-core-sort"]], "mlx.core.split": [[169, "mlx-core-split"]], "mlx.core.sqrt": [[170, "mlx-core-sqrt"]], "mlx.core.square": [[171, "mlx-core-square"]], "mlx.core.squeeze": [[172, "mlx-core-squeeze"]], "mlx.core.stack": [[173, "mlx-core-stack"]], "mlx.core.stop_gradient": [[174, "mlx-core-stop-gradient"]], "mlx.core.subtract": [[175, "mlx-core-subtract"]], "mlx.core.sum": [[176, "mlx-core-sum"]], "mlx.core.swapaxes": [[177, "mlx-core-swapaxes"]], "mlx.core.take": [[178, "mlx-core-take"]], "mlx.core.take_along_axis": [[179, "mlx-core-take-along-axis"]], "mlx.core.tan": [[180, "mlx-core-tan"]], "mlx.core.tanh": [[181, "mlx-core-tanh"]], "mlx.core.tensordot": [[182, "mlx-core-tensordot"]], "mlx.core.transpose": [[183, "mlx-core-transpose"]], "mlx.core.tri": [[184, "mlx-core-tri"]], "mlx.core.tril": [[185, "mlx-core-tril"]], "mlx.core.triu": [[186, "mlx-core-triu"]], "mlx.core.value_and_grad": [[187, "mlx-core-value-and-grad"]], "mlx.core.var": [[188, "mlx-core-var"]], "mlx.core.vjp": [[189, "mlx-core-vjp"]], "mlx.core.vmap": [[190, "mlx-core-vmap"]], "mlx.core.where": [[191, "mlx-core-where"]], "mlx.core.zeros": [[192, "mlx-core-zeros"]], "mlx.core.zeros_like": [[193, "mlx-core-zeros-like"]], "mlx.nn.value_and_grad": [[194, "mlx-nn-value-and-grad"]], "mlx.optimizers.AdaDelta": [[195, "mlx-optimizers-adadelta"]], "mlx.optimizers.Adafactor": [[196, "mlx-optimizers-adafactor"]], "mlx.optimizers.Adagrad": [[197, "mlx-optimizers-adagrad"]], "mlx.optimizers.Adam": [[198, "mlx-optimizers-adam"]], "mlx.optimizers.AdamW": [[199, "mlx-optimizers-adamw"]], "mlx.optimizers.Adamax": [[200, "mlx-optimizers-adamax"]], "mlx.optimizers.Lion": [[201, "mlx-optimizers-lion"]], "mlx.optimizers.Optimizer": [[202, "mlx-optimizers-optimizer"]], "mlx.optimizers.OptimizerState": [[203, "mlx-optimizers-optimizerstate"]], "mlx.optimizers.RMSprop": [[204, "mlx-optimizers-rmsprop"]], "mlx.optimizers.SGD": [[205, "mlx-optimizers-sgd"]], "mlx.utils.tree_flatten": [[206, "mlx-utils-tree-flatten"]], "mlx.utils.tree_map": [[207, "mlx-utils-tree-map"]], "mlx.utils.tree_unflatten": [[208, "mlx-utils-tree-unflatten"]], "Array": [[209, "array"]], "Data Types": [[210, "id1"]], "Supported Data Types": [[210, "id2"]], "Devices and Streams": [[211, "devices-and-streams"]], "FFT": [[212, "fft"]], "Linear Algebra": [[213, "linear-algebra"]], "Neural Networks": [[214, "neural-networks"]], "Quick Start with Neural Networks": [[214, "quick-start-with-neural-networks"]], "The Module Class": [[214, "the-module-class"]], "Parameters": [[214, "parameters"]], "Updating the Parameters": [[214, "updating-the-parameters"]], "Inspecting Modules": [[214, "inspecting-modules"]], "Value and Grad": [[214, "value-and-grad"]], "mlx.nn.ALiBi": [[215, "mlx-nn-alibi"]], "mlx.nn.BatchNorm": [[216, "mlx-nn-batchnorm"]], "mlx.nn.Conv1d": [[217, "mlx-nn-conv1d"]], "mlx.nn.Conv2d": [[218, "mlx-nn-conv2d"]], "mlx.nn.Dropout": [[219, "mlx-nn-dropout"]], "mlx.nn.Dropout2d": [[220, "mlx-nn-dropout2d"]], "mlx.nn.Dropout3d": [[221, "mlx-nn-dropout3d"]], "mlx.nn.Embedding": [[222, "mlx-nn-embedding"]], "mlx.nn.GELU": [[223, "mlx-nn-gelu"]], "mlx.nn.GroupNorm": [[224, "mlx-nn-groupnorm"]], "mlx.nn.InstanceNorm": [[225, "mlx-nn-instancenorm"]], "mlx.nn.LayerNorm": [[226, "mlx-nn-layernorm"]], "mlx.nn.Linear": [[227, "mlx-nn-linear"]], "mlx.nn.Mish": [[228, "mlx-nn-mish"]], "mlx.nn.Module.apply": [[229, "mlx-nn-module-apply"]], "mlx.nn.Module.apply_to_modules": [[230, "mlx-nn-module-apply-to-modules"]], "mlx.nn.Module.children": [[231, "mlx-nn-module-children"]], "mlx.nn.Module.eval": [[232, "mlx-nn-module-eval"]], "mlx.nn.Module.filter_and_map": [[233, "mlx-nn-module-filter-and-map"]], "mlx.nn.Module.freeze": [[234, "mlx-nn-module-freeze"]], "mlx.nn.Module.leaf_modules": [[235, "mlx-nn-module-leaf-modules"]], "mlx.nn.Module.load_weights": [[236, "mlx-nn-module-load-weights"]], "mlx.nn.Module.modules": [[237, "mlx-nn-module-modules"]], "mlx.nn.Module.named_modules": [[238, "mlx-nn-module-named-modules"]], "mlx.nn.Module.parameters": [[239, "mlx-nn-module-parameters"]], "mlx.nn.Module.save_weights": [[240, "mlx-nn-module-save-weights"]], "mlx.nn.Module.train": [[241, "mlx-nn-module-train"]], "mlx.nn.Module.trainable_parameters": [[242, "mlx-nn-module-trainable-parameters"]], "mlx.nn.Module.training": [[243, "mlx-nn-module-training"]], "mlx.nn.Module.unfreeze": [[244, "mlx-nn-module-unfreeze"]], "mlx.nn.Module.update": [[245, "mlx-nn-module-update"]], "mlx.nn.Module.update_modules": [[246, "mlx-nn-module-update-modules"]], "mlx.nn.MultiHeadAttention": [[247, "mlx-nn-multiheadattention"]], "mlx.nn.PReLU": [[248, "mlx-nn-prelu"]], "mlx.nn.QuantizedLinear": [[249, "mlx-nn-quantizedlinear"]], "mlx.nn.RMSNorm": [[250, "mlx-nn-rmsnorm"]], "mlx.nn.ReLU": [[251, "mlx-nn-relu"]], "mlx.nn.RoPE": [[252, "mlx-nn-rope"]], "mlx.nn.SELU": [[253, "mlx-nn-selu"]], "mlx.nn.Sequential": [[254, "mlx-nn-sequential"]], "mlx.nn.SiLU": [[255, "mlx-nn-silu"]], "mlx.nn.SinusoidalPositionalEncoding": [[256, "mlx-nn-sinusoidalpositionalencoding"]], "mlx.nn.Step": [[257, "mlx-nn-step"]], "mlx.nn.Transformer": [[258, "mlx-nn-transformer"]], "mlx.nn.init.constant": [[259, "mlx-nn-init-constant"]], "mlx.nn.init.glorot_normal": [[260, "mlx-nn-init-glorot-normal"]], "mlx.nn.init.glorot_uniform": [[261, "mlx-nn-init-glorot-uniform"]], "mlx.nn.init.he_normal": [[262, "mlx-nn-init-he-normal"]], "mlx.nn.init.he_uniform": [[263, "mlx-nn-init-he-uniform"]], "mlx.nn.init.identity": [[264, "mlx-nn-init-identity"]], "mlx.nn.init.normal": [[265, "mlx-nn-init-normal"]], "mlx.nn.init.uniform": [[266, "mlx-nn-init-uniform"]], "mlx.nn.gelu": [[267, "mlx-nn-gelu"]], "mlx.nn.gelu_approx": [[268, "mlx-nn-gelu-approx"]], "mlx.nn.gelu_fast_approx": [[269, "mlx-nn-gelu-fast-approx"]], "mlx.nn.losses.binary_cross_entropy": [[270, "mlx-nn-losses-binary-cross-entropy"]], "mlx.nn.losses.contrastive_loss": [[271, "mlx-nn-losses-contrastive-loss"]], "mlx.nn.losses.cosine_similarity_loss": [[272, "mlx-nn-losses-cosine-similarity-loss"]], "mlx.nn.losses.cross_entropy": [[273, "mlx-nn-losses-cross-entropy"]], "mlx.nn.losses.gaussian_nll_loss": [[274, "mlx-nn-losses-gaussian-nll-loss"]], "mlx.nn.losses.hinge_loss": [[275, "mlx-nn-losses-hinge-loss"]], "mlx.nn.losses.huber_loss": [[276, "mlx-nn-losses-huber-loss"]], "mlx.nn.losses.kl_div_loss": [[277, "mlx-nn-losses-kl-div-loss"]], "mlx.nn.losses.l1_loss": [[278, "mlx-nn-losses-l1-loss"]], "mlx.nn.losses.log_cosh_loss": [[279, "mlx-nn-losses-log-cosh-loss"]], "mlx.nn.losses.mse_loss": [[280, "mlx-nn-losses-mse-loss"]], "mlx.nn.losses.nll_loss": [[281, "mlx-nn-losses-nll-loss"]], "mlx.nn.losses.smooth_l1_loss": [[282, "mlx-nn-losses-smooth-l1-loss"]], "mlx.nn.losses.triplet_loss": [[283, "mlx-nn-losses-triplet-loss"]], "mlx.nn.mish": [[284, "mlx-nn-mish"]], "mlx.nn.prelu": [[285, "mlx-nn-prelu"]], "mlx.nn.relu": [[286, "mlx-nn-relu"]], "mlx.nn.selu": [[287, "mlx-nn-selu"]], "mlx.nn.silu": [[288, "mlx-nn-silu"]], "mlx.nn.step": [[289, "mlx-nn-step"]], "Functions": [[290, "functions"]], "Initializers": [[291, "initializers"]], "Layers": [[292, "layers"]], "Loss Functions": [[293, "loss-functions"]], "Module": [[294, "module"]], "Optimizers": [[296, "optimizers"]], "Random": [[297, "random"]], "Transforms": [[298, "transforms"]], "Tree Utils": [[299, "tree-utils"]], "Function Transforms": [[300, "function-transforms"]], "Automatic Differentiation": [[300, "automatic-differentiation"]], "Automatic Vectorization": [[300, "automatic-vectorization"]], "Indexing Arrays": [[301, "indexing-arrays"]], "Differences from NumPy": [[301, "differences-from-numpy"]], "In Place Updates": [[301, "in-place-updates"]], "Lazy Evaluation": [[302, "lazy-evaluation"]], "Why Lazy Evaluation": [[302, "why-lazy-evaluation"]], "Transforming Compute Graphs": [[302, "transforming-compute-graphs"]], "Only Compute What You Use": [[302, "only-compute-what-you-use"]], "When to Evaluate": [[302, "when-to-evaluate"]], "Conversion to NumPy and Other Frameworks": [[303, "conversion-to-numpy-and-other-frameworks"]], "PyTorch": [[303, "pytorch"]], "JAX": [[303, "jax"]], "TensorFlow": [[303, "tensorflow"]], "Quick Start Guide": [[304, "quick-start-guide"]], "Basics": [[304, "basics"]], "Function and Graph Transformations": [[304, "function-and-graph-transformations"]], "Saving and Loading Arrays": [[305, "saving-and-loading-arrays"]], "Serialization Formats": [[305, "id1"]], "Unified Memory": [[306, "unified-memory"]], "A Simple Example": [[306, "a-simple-example"]], "Using Streams": [[307, "using-streams"]], "Specifying the Stream": [[307, "specifying-the-stream"]]}, "indexentries": {"device (class in mlx.core)": [[7, "mlx.core.Device"]], "__init__() (mlx.core.device method)": [[7, "mlx.core.Device.__init__"]], "dtype (class in mlx.core)": [[8, "mlx.core.Dtype"]], "__init__() (mlx.core.dtype method)": [[8, "mlx.core.Dtype.__init__"]], "stream (class in mlx.core)": [[9, "mlx.core.Stream"]], "__init__() (mlx.core.stream method)": [[9, "mlx.core.Stream.__init__"]], "abs() (in module mlx.core)": [[10, "mlx.core.abs"]], "add() (in module mlx.core)": [[11, "mlx.core.add"]], "all() (in module mlx.core)": [[12, "mlx.core.all"]], "allclose() (in module mlx.core)": [[13, "mlx.core.allclose"]], "any() (in module mlx.core)": [[14, "mlx.core.any"]], "arange() (in module mlx.core)": [[15, "mlx.core.arange"]], "arccos() (in module mlx.core)": [[16, "mlx.core.arccos"]], "arccosh() (in module mlx.core)": [[17, "mlx.core.arccosh"]], "arcsin() (in module mlx.core)": [[18, "mlx.core.arcsin"]], "arcsinh() (in module mlx.core)": [[19, "mlx.core.arcsinh"]], "arctan() (in module mlx.core)": [[20, "mlx.core.arctan"]], "arctanh() (in module mlx.core)": [[21, "mlx.core.arctanh"]], "argmax() (in module mlx.core)": [[22, "mlx.core.argmax"]], "argmin() (in module mlx.core)": [[23, "mlx.core.argmin"]], "argpartition() (in module mlx.core)": [[24, "mlx.core.argpartition"]], "argsort() (in module mlx.core)": [[25, "mlx.core.argsort"]], "__init__() (mlx.core.array method)": [[26, "mlx.core.array.__init__"]], "array (class in mlx.core)": [[26, "mlx.core.array"]], "t (mlx.core.array property)": [[27, "mlx.core.array.T"]], "abs() (mlx.core.array method)": [[28, "mlx.core.array.abs"]], "all() (mlx.core.array method)": [[29, "mlx.core.array.all"]], "any() (mlx.core.array method)": [[30, "mlx.core.array.any"]], "argmax() (mlx.core.array method)": [[31, "mlx.core.array.argmax"]], "argmin() (mlx.core.array method)": [[32, "mlx.core.array.argmin"]], "astype() (mlx.core.array method)": [[33, "mlx.core.array.astype"]], "cos() (mlx.core.array method)": [[34, "mlx.core.array.cos"]], "dtype (mlx.core.array property)": [[35, "mlx.core.array.dtype"]], "exp() (mlx.core.array method)": [[36, "mlx.core.array.exp"]], "item() (mlx.core.array method)": [[37, "mlx.core.array.item"]], "log() (mlx.core.array method)": [[38, "mlx.core.array.log"]], "log1p() (mlx.core.array method)": [[39, "mlx.core.array.log1p"]], "logsumexp() (mlx.core.array method)": [[40, "mlx.core.array.logsumexp"]], "max() (mlx.core.array method)": [[41, "mlx.core.array.max"]], "mean() (mlx.core.array method)": [[42, "mlx.core.array.mean"]], "min() (mlx.core.array method)": [[43, "mlx.core.array.min"]], "ndim (mlx.core.array property)": [[44, "mlx.core.array.ndim"]], "prod() (mlx.core.array method)": [[45, "mlx.core.array.prod"]], "reciprocal() (mlx.core.array method)": [[46, "mlx.core.array.reciprocal"]], "reshape() (mlx.core.array method)": [[47, "mlx.core.array.reshape"]], "round() (mlx.core.array method)": [[48, "mlx.core.array.round"]], "rsqrt() (mlx.core.array method)": [[49, "mlx.core.array.rsqrt"]], "shape (mlx.core.array property)": [[50, "mlx.core.array.shape"]], "sin() (mlx.core.array method)": [[51, "mlx.core.array.sin"]], "size (mlx.core.array property)": [[52, "mlx.core.array.size"]], "split() (mlx.core.array method)": [[53, "mlx.core.array.split"]], "sqrt() (mlx.core.array method)": [[54, "mlx.core.array.sqrt"]], "square() (mlx.core.array method)": [[55, "mlx.core.array.square"]], "sum() (mlx.core.array method)": [[56, "mlx.core.array.sum"]], "tolist() (mlx.core.array method)": [[57, "mlx.core.array.tolist"]], "transpose() (mlx.core.array method)": [[58, "mlx.core.array.transpose"]], "var() (mlx.core.array method)": [[59, "mlx.core.array.var"]], "array_equal() (in module mlx.core)": [[60, "mlx.core.array_equal"]], "broadcast_to() (in module mlx.core)": [[61, "mlx.core.broadcast_to"]], "ceil() (in module mlx.core)": [[62, "mlx.core.ceil"]], "clip() (in module mlx.core)": [[63, "mlx.core.clip"]], "concatenate() (in module mlx.core)": [[64, "mlx.core.concatenate"]], "conv1d() (in module mlx.core)": [[65, "mlx.core.conv1d"]], "conv2d() (in module mlx.core)": [[66, "mlx.core.conv2d"]], "convolve() (in module mlx.core)": [[67, "mlx.core.convolve"]], "cos() (in module mlx.core)": [[68, "mlx.core.cos"]], "cosh() (in module mlx.core)": [[69, "mlx.core.cosh"]], "default_device() (in module mlx.core)": [[70, "mlx.core.default_device"]], "default_stream() (in module mlx.core)": [[71, "mlx.core.default_stream"]], "dequantize() (in module mlx.core)": [[72, "mlx.core.dequantize"]], "divide() (in module mlx.core)": [[73, "mlx.core.divide"]], "divmod() (in module mlx.core)": [[74, "mlx.core.divmod"]], "equal() (in module mlx.core)": [[75, "mlx.core.equal"]], "erf() (in module mlx.core)": [[76, "mlx.core.erf"]], "erfinv() (in module mlx.core)": [[77, "mlx.core.erfinv"]], "eval() (in module mlx.core)": [[78, "mlx.core.eval"]], "exp() (in module mlx.core)": [[79, "mlx.core.exp"]], "expand_dims() (in module mlx.core)": [[80, "mlx.core.expand_dims"]], "eye() (in module mlx.core)": [[81, "mlx.core.eye"]], "fft() (in module mlx.core.fft)": [[82, "mlx.core.fft.fft"]], "fft2() (in module mlx.core.fft)": [[83, "mlx.core.fft.fft2"]], "fftn() (in module mlx.core.fft)": [[84, "mlx.core.fft.fftn"]], "ifft() (in module mlx.core.fft)": [[85, "mlx.core.fft.ifft"]], "ifft2() (in module mlx.core.fft)": [[86, "mlx.core.fft.ifft2"]], "ifftn() (in module mlx.core.fft)": [[87, "mlx.core.fft.ifftn"]], "irfft() (in module mlx.core.fft)": [[88, "mlx.core.fft.irfft"]], "irfft2() (in module mlx.core.fft)": [[89, "mlx.core.fft.irfft2"]], "irfftn() (in module mlx.core.fft)": [[90, "mlx.core.fft.irfftn"]], "rfft() (in module mlx.core.fft)": [[91, "mlx.core.fft.rfft"]], "rfft2() (in module mlx.core.fft)": [[92, "mlx.core.fft.rfft2"]], "rfftn() (in module mlx.core.fft)": [[93, "mlx.core.fft.rfftn"]], "flatten() (in module mlx.core)": [[94, "mlx.core.flatten"]], "floor() (in module mlx.core)": [[95, "mlx.core.floor"]], "floor_divide() (in module mlx.core)": [[96, "mlx.core.floor_divide"]], "full() (in module mlx.core)": [[97, "mlx.core.full"]], "grad() (in module mlx.core)": [[98, "mlx.core.grad"]], "greater() (in module mlx.core)": [[99, "mlx.core.greater"]], "greater_equal() (in module mlx.core)": [[100, "mlx.core.greater_equal"]], "identity() (in module mlx.core)": [[101, "mlx.core.identity"]], "inner() (in module mlx.core)": [[102, "mlx.core.inner"]], "isinf() (in module mlx.core)": [[103, "mlx.core.isinf"]], "isnan() (in module mlx.core)": [[104, "mlx.core.isnan"]], "isneginf() (in module mlx.core)": [[105, "mlx.core.isneginf"]], "isposinf() (in module mlx.core)": [[106, "mlx.core.isposinf"]], "jvp() (in module mlx.core)": [[107, "mlx.core.jvp"]], "less() (in module mlx.core)": [[108, "mlx.core.less"]], "less_equal() (in module mlx.core)": [[109, "mlx.core.less_equal"]], "norm() (in module mlx.core.linalg)": [[110, "mlx.core.linalg.norm"]], "linspace() (in module mlx.core)": [[111, "mlx.core.linspace"]], "load() (in module mlx.core)": [[112, "mlx.core.load"]], "log() (in module mlx.core)": [[113, "mlx.core.log"]], "log10() (in module mlx.core)": [[114, "mlx.core.log10"]], "log1p() (in module mlx.core)": [[115, "mlx.core.log1p"]], "log2() (in module mlx.core)": [[116, "mlx.core.log2"]], "logaddexp() (in module mlx.core)": [[117, "mlx.core.logaddexp"]], "logical_and() (in module mlx.core)": [[118, "mlx.core.logical_and"]], "logical_not() (in module mlx.core)": [[119, "mlx.core.logical_not"]], "logical_or() (in module mlx.core)": [[120, "mlx.core.logical_or"]], "logsumexp() (in module mlx.core)": [[121, "mlx.core.logsumexp"]], "matmul() (in module mlx.core)": [[122, "mlx.core.matmul"]], "max() (in module mlx.core)": [[123, "mlx.core.max"]], "maximum() (in module mlx.core)": [[124, "mlx.core.maximum"]], "mean() (in module mlx.core)": [[125, "mlx.core.mean"]], "min() (in module mlx.core)": [[126, "mlx.core.min"]], "minimum() (in module mlx.core)": [[127, "mlx.core.minimum"]], "moveaxis() (in module mlx.core)": [[128, "mlx.core.moveaxis"]], "multiply() (in module mlx.core)": [[129, "mlx.core.multiply"]], "negative() (in module mlx.core)": [[130, "mlx.core.negative"]], "new_stream() (in module mlx.core)": [[131, "mlx.core.new_stream"]], "ones() (in module mlx.core)": [[132, "mlx.core.ones"]], "ones_like() (in module mlx.core)": [[133, "mlx.core.ones_like"]], "outer() (in module mlx.core)": [[134, "mlx.core.outer"]], "pad() (in module mlx.core)": [[135, "mlx.core.pad"]], "partition() (in module mlx.core)": [[136, "mlx.core.partition"]], "prod() (in module mlx.core)": [[137, "mlx.core.prod"]], "quantize() (in module mlx.core)": [[138, "mlx.core.quantize"]], "quantized_matmul() (in module mlx.core)": [[139, "mlx.core.quantized_matmul"]], "bernoulli() (in module mlx.core.random)": [[140, "mlx.core.random.bernoulli"]], "categorical() (in module mlx.core.random)": [[141, "mlx.core.random.categorical"]], "gumbel() (in module mlx.core.random)": [[142, "mlx.core.random.gumbel"]], "key() (in module mlx.core.random)": [[143, "mlx.core.random.key"]], "normal() (in module mlx.core.random)": [[144, "mlx.core.random.normal"]], "randint() (in module mlx.core.random)": [[145, "mlx.core.random.randint"]], "seed() (in module mlx.core.random)": [[146, "mlx.core.random.seed"]], "split() (in module mlx.core.random)": [[147, "mlx.core.random.split"]], "truncated_normal() (in module mlx.core.random)": [[148, "mlx.core.random.truncated_normal"]], "uniform() (in module mlx.core.random)": [[149, "mlx.core.random.uniform"]], "reciprocal() (in module mlx.core)": [[150, "mlx.core.reciprocal"]], "repeat() (in module mlx.core)": [[151, "mlx.core.repeat"]], "reshape() (in module mlx.core)": [[152, "mlx.core.reshape"]], "round() (in module mlx.core)": [[153, "mlx.core.round"]], "rsqrt() (in module mlx.core)": [[154, "mlx.core.rsqrt"]], "save() (in module mlx.core)": [[155, "mlx.core.save"]], "save_gguf() (in module mlx.core)": [[156, "mlx.core.save_gguf"]], "save_safetensors() (in module mlx.core)": [[157, "mlx.core.save_safetensors"]], "savez() (in module mlx.core)": [[158, "mlx.core.savez"]], "savez_compressed() (in module mlx.core)": [[159, "mlx.core.savez_compressed"]], "set_default_device() (in module mlx.core)": [[160, "mlx.core.set_default_device"]], "set_default_stream() (in module mlx.core)": [[161, "mlx.core.set_default_stream"]], "sigmoid() (in module mlx.core)": [[162, "mlx.core.sigmoid"]], "sign() (in module mlx.core)": [[163, "mlx.core.sign"]], "simplify() (in module mlx.core)": [[164, "mlx.core.simplify"]], "sin() (in module mlx.core)": [[165, "mlx.core.sin"]], "sinh() (in module mlx.core)": [[166, "mlx.core.sinh"]], "softmax() (in module mlx.core)": [[167, "mlx.core.softmax"]], "sort() (in module mlx.core)": [[168, "mlx.core.sort"]], "split() (in module mlx.core)": [[169, "mlx.core.split"]], "sqrt() (in module mlx.core)": [[170, "mlx.core.sqrt"]], "square() (in module mlx.core)": [[171, "mlx.core.square"]], "squeeze() (in module mlx.core)": [[172, "mlx.core.squeeze"]], "stack() (in module mlx.core)": [[173, "mlx.core.stack"]], "stop_gradient() (in module mlx.core)": [[174, "mlx.core.stop_gradient"]], "subtract() (in module mlx.core)": [[175, "mlx.core.subtract"]], "sum() (in module mlx.core)": [[176, "mlx.core.sum"]], "swapaxes() (in module mlx.core)": [[177, "mlx.core.swapaxes"]], "take() (in module mlx.core)": [[178, "mlx.core.take"]], "take_along_axis() (in module mlx.core)": [[179, "mlx.core.take_along_axis"]], "tan() (in module mlx.core)": [[180, "mlx.core.tan"]], "tanh() (in module mlx.core)": [[181, "mlx.core.tanh"]], "tensordot() (in module mlx.core)": [[182, "mlx.core.tensordot"]], "transpose() (in module mlx.core)": [[183, "mlx.core.transpose"]], "tri() (in module mlx.core)": [[184, "mlx.core.tri"]], "tril() (in module mlx.core)": [[185, "mlx.core.tril"]], "triu() (in module mlx.core)": [[186, "mlx.core.triu"]], "value_and_grad() (in module mlx.core)": [[187, "mlx.core.value_and_grad"]], "var() (in module mlx.core)": [[188, "mlx.core.var"]], "vjp() (in module mlx.core)": [[189, "mlx.core.vjp"]], "vmap() (in module mlx.core)": [[190, "mlx.core.vmap"]], "where() (in module mlx.core)": [[191, "mlx.core.where"]], "zeros() (in module mlx.core)": [[192, "mlx.core.zeros"]], "zeros_like() (in module mlx.core)": [[193, "mlx.core.zeros_like"]], "value_and_grad() (in module mlx.nn)": [[194, "mlx.nn.value_and_grad"]], "adadelta (class in mlx.optimizers)": [[195, "mlx.optimizers.AdaDelta"]], "adafactor (class in mlx.optimizers)": [[196, "mlx.optimizers.Adafactor"]], "adagrad (class in mlx.optimizers)": [[197, "mlx.optimizers.Adagrad"]], "adam (class in mlx.optimizers)": [[198, "mlx.optimizers.Adam"]], "adamw (class in mlx.optimizers)": [[199, "mlx.optimizers.AdamW"]], "adamax (class in mlx.optimizers)": [[200, "mlx.optimizers.Adamax"]], "lion (class in mlx.optimizers)": [[201, "mlx.optimizers.Lion"]], "optimizer (class in mlx.optimizers)": [[202, "mlx.optimizers.Optimizer"]], "state (mlx.optimizers.optimizer attribute)": [[202, "mlx.optimizers.Optimizer.state"]], "optimizerstate (class in mlx.optimizers)": [[203, "mlx.optimizers.OptimizerState"]], "rmsprop (class in mlx.optimizers)": [[204, "mlx.optimizers.RMSprop"]], "sgd (class in mlx.optimizers)": [[205, "mlx.optimizers.SGD"]], "tree_flatten() (in module mlx.utils)": [[206, "mlx.utils.tree_flatten"]], "tree_map() (in module mlx.utils)": [[207, "mlx.utils.tree_map"]], "tree_unflatten() (in module mlx.utils)": [[208, "mlx.utils.tree_unflatten"]], "alibi (class in mlx.nn)": [[215, "mlx.nn.ALiBi"]], "batchnorm (class in mlx.nn)": [[216, "mlx.nn.BatchNorm"]], "conv1d (class in mlx.nn)": [[217, "mlx.nn.Conv1d"]], "conv2d (class in mlx.nn)": [[218, "mlx.nn.Conv2d"]], "dropout (class in mlx.nn)": [[219, "mlx.nn.Dropout"]], "dropout2d (class in mlx.nn)": [[220, "mlx.nn.Dropout2d"]], "dropout3d (class in mlx.nn)": [[221, "mlx.nn.Dropout3d"]], "embedding (class in mlx.nn)": [[222, "mlx.nn.Embedding"]], "gelu (class in mlx.nn)": [[223, "mlx.nn.GELU"], [267, "mlx.nn.gelu"]], "groupnorm (class in mlx.nn)": [[224, "mlx.nn.GroupNorm"]], "instancenorm (class in mlx.nn)": [[225, "mlx.nn.InstanceNorm"]], "layernorm (class in mlx.nn)": [[226, "mlx.nn.LayerNorm"]], "linear (class in mlx.nn)": [[227, "mlx.nn.Linear"]], "mish (class in mlx.nn)": [[228, "mlx.nn.Mish"], [284, "mlx.nn.mish"]], "apply() (mlx.nn.module method)": [[229, "mlx.nn.Module.apply"]], "apply_to_modules() (mlx.nn.module method)": [[230, "mlx.nn.Module.apply_to_modules"]], "children() (mlx.nn.module method)": [[231, "mlx.nn.Module.children"]], "eval() (mlx.nn.module method)": [[232, "mlx.nn.Module.eval"]], "filter_and_map() (mlx.nn.module method)": [[233, "mlx.nn.Module.filter_and_map"]], "freeze() (mlx.nn.module method)": [[234, "mlx.nn.Module.freeze"]], "leaf_modules() (mlx.nn.module method)": [[235, "mlx.nn.Module.leaf_modules"]], "load_weights() (mlx.nn.module method)": [[236, "mlx.nn.Module.load_weights"]], "modules() (mlx.nn.module method)": [[237, "mlx.nn.Module.modules"]], "named_modules() (mlx.nn.module method)": [[238, "mlx.nn.Module.named_modules"]], "parameters() (mlx.nn.module method)": [[239, "mlx.nn.Module.parameters"]], "save_weights() (mlx.nn.module method)": [[240, "mlx.nn.Module.save_weights"]], "train() (mlx.nn.module method)": [[241, "mlx.nn.Module.train"]], "trainable_parameters() (mlx.nn.module method)": [[242, "mlx.nn.Module.trainable_parameters"]], "training (mlx.nn.module property)": [[243, "mlx.nn.Module.training"]], "unfreeze() (mlx.nn.module method)": [[244, "mlx.nn.Module.unfreeze"]], "update() (mlx.nn.module method)": [[245, "mlx.nn.Module.update"]], "update_modules() (mlx.nn.module method)": [[246, "mlx.nn.Module.update_modules"]], "multiheadattention (class in mlx.nn)": [[247, "mlx.nn.MultiHeadAttention"]], "prelu (class in mlx.nn)": [[248, "mlx.nn.PReLU"], [285, "mlx.nn.prelu"]], "quantizedlinear (class in mlx.nn)": [[249, "mlx.nn.QuantizedLinear"]], "rmsnorm (class in mlx.nn)": [[250, "mlx.nn.RMSNorm"]], "relu (class in mlx.nn)": [[251, "mlx.nn.ReLU"], [286, "mlx.nn.relu"]], "rope (class in mlx.nn)": [[252, "mlx.nn.RoPE"]], "_cos_sin_theta_key (mlx.nn.rope attribute)": [[252, "mlx.nn.RoPE._cos_sin_theta_key"]], "_cos_sin_theta_value (mlx.nn.rope attribute)": [[252, "mlx.nn.RoPE._cos_sin_theta_value"]], "selu (class in mlx.nn)": [[253, "mlx.nn.SELU"], [287, "mlx.nn.selu"]], "sequential (class in mlx.nn)": [[254, "mlx.nn.Sequential"]], "silu (class in mlx.nn)": [[255, "mlx.nn.SiLU"], [288, "mlx.nn.silu"]], "sinusoidalpositionalencoding (class in mlx.nn)": [[256, "mlx.nn.SinusoidalPositionalEncoding"]], "step (class in mlx.nn)": [[257, "mlx.nn.Step"], [289, "mlx.nn.step"]], "transformer (class in mlx.nn)": [[258, "mlx.nn.Transformer"]], "constant() (in module mlx.nn.init)": [[259, "mlx.nn.init.constant"]], "glorot_normal() (in module mlx.nn.init)": [[260, "mlx.nn.init.glorot_normal"]], "glorot_uniform() (in module mlx.nn.init)": [[261, "mlx.nn.init.glorot_uniform"]], "he_normal() (in module mlx.nn.init)": [[262, "mlx.nn.init.he_normal"]], "he_uniform() (in module mlx.nn.init)": [[263, "mlx.nn.init.he_uniform"]], "identity() (in module mlx.nn.init)": [[264, "mlx.nn.init.identity"]], "normal() (in module mlx.nn.init)": [[265, "mlx.nn.init.normal"]], "uniform() (in module mlx.nn.init)": [[266, "mlx.nn.init.uniform"]], "gelu_approx (class in mlx.nn)": [[268, "mlx.nn.gelu_approx"]], "gelu_fast_approx (class in mlx.nn)": [[269, "mlx.nn.gelu_fast_approx"]], "binary_cross_entropy (class in mlx.nn.losses)": [[270, "mlx.nn.losses.binary_cross_entropy"]], "contrastive_loss (class in mlx.nn.losses)": [[271, "mlx.nn.losses.contrastive_loss"]], "cosine_similarity_loss (class in mlx.nn.losses)": [[272, "mlx.nn.losses.cosine_similarity_loss"]], "cross_entropy (class in mlx.nn.losses)": [[273, "mlx.nn.losses.cross_entropy"]], "gaussian_nll_loss (class in mlx.nn.losses)": [[274, "mlx.nn.losses.gaussian_nll_loss"]], "hinge_loss (class in mlx.nn.losses)": [[275, "mlx.nn.losses.hinge_loss"]], "huber_loss (class in mlx.nn.losses)": [[276, "mlx.nn.losses.huber_loss"]], "kl_div_loss (class in mlx.nn.losses)": [[277, "mlx.nn.losses.kl_div_loss"]], "l1_loss (class in mlx.nn.losses)": [[278, "mlx.nn.losses.l1_loss"]], "log_cosh_loss (class in mlx.nn.losses)": [[279, "mlx.nn.losses.log_cosh_loss"]], "mse_loss (class in mlx.nn.losses)": [[280, "mlx.nn.losses.mse_loss"]], "nll_loss (class in mlx.nn.losses)": [[281, "mlx.nn.losses.nll_loss"]], "smooth_l1_loss (class in mlx.nn.losses)": [[282, "mlx.nn.losses.smooth_l1_loss"]], "triplet_loss (class in mlx.nn.losses)": [[283, "mlx.nn.losses.triplet_loss"]], "module (class in mlx.nn)": [[294, "mlx.nn.Module"]]}})